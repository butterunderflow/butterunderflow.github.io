<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Articles on Butter&#39;s space</title>
    <link>http://localhost:1313/blog/articles/</link>
    <description>Recent content in Articles on Butter&#39;s space</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>zh-CN</language>
    <managingEditor>azhong.934@gmail.com (butterunderflow)</managingEditor>
    <webMaster>azhong.934@gmail.com (butterunderflow)</webMaster>
    <lastBuildDate>Tue, 30 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/articles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fun for Fun</title>
      <link>http://localhost:1313/blog/articles/20240721011820-fun_for_fun/</link>
      <pubDate>Tue, 30 Jul 2024 00:00:00 +0000</pubDate><author>azhong.934@gmail.com (butterunderflow)</author>
      <guid>http://localhost:1313/blog/articles/20240721011820-fun_for_fun/</guid>
      <description>&lt;p&gt;我发起了一个从 0 开始制作编程语言的项目 &lt;a href=&#34;https://github.com/butterunderflow/fun-for-fun&#34;&gt;fun for fun&lt;/a&gt;.
该项目使用 OCaml 实现了一个编译器(称为 ff 编译器), 可以把一个 OCaml 的子集编译到可以 C++ 源程序
(生成程序只用到了 C 的语法),
该 C++ 程序可以被进一步编译为可执行文件.&lt;/p&gt;
&lt;h2 id=&#34;为什么又一个编译器教程&#34;&gt;为什么又一个编译器教程&lt;/h2&gt;
&lt;p&gt;为什么又又又一个关于编程语言实现的教程?&lt;/p&gt;
&lt;p&gt;并不是已有的教学项目不够好/不足够, 现在高质量的编译器教程非常多(可以直接看最后一节看我的推荐目录).
之所以发起一个新的编译器教学项目, 主要有以下几方面的原因:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;实现一个编译器真的很有趣&lt;/strong&gt;&lt;/strong&gt;: 我最开始是只是对 OCaml 的类型系统(主要是模块系统)的检查很感兴趣,
只是想着实现一个类型系统以加深一下自己的理解. 在完成类型系统的实现后, 每次只是想再往后再走一小步,
&amp;ldquo;不知不觉&amp;quot;就完成了一个到 C++ 的后端, 正如这个项目名称 Fun for Fun, 这件事情太有趣了使我一有时间就忍不住不做;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;向前辈学习&lt;/strong&gt;&lt;/strong&gt;: 现在的高质量编译器教学项目确实很多, 这些优秀的教程已经帮助我少走了很多弯路.
作为一个已经从前辈们的教学项目受益良多的人, 我认为不仅有必要学习他们传播的知识,
还有必要学习他们无私共享的精神, 我希望能通过文字说明和代码演示展示我对知识的理解和学习的过程,
让未来的学习者也能少走一些弯路;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;与人沟通对理解深刻的知识是很有帮助&lt;/strong&gt;&lt;/strong&gt;:
知识的理解, 从最 &lt;strong&gt;&lt;strong&gt;看懂书本/论文上的介绍&lt;/strong&gt;&lt;/strong&gt; 到 &lt;strong&gt;&lt;strong&gt;能在实践中根据需要运用自如&lt;/strong&gt;&lt;/strong&gt;, 是需要一个过程的,
对于一些比较深刻的知识, 这甚至可能是一个长期的过程.
通过给别人讲解, 可以帮助我站在多个角度重新思考问题, 从而加深我对知识的理解, 让我离事物的&amp;quot;本质&amp;quot;更进一步.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;学习资料推荐&#34;&gt;学习资料推荐&lt;/h2&gt;
&lt;h3 id=&#34;计算机程序构造与解释--sicp&#34;&gt;计算机程序构造与解释(SICP)&lt;/h3&gt;
&lt;p&gt;首先要推荐的是已经被很多人推荐过的 SICP (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Abelson and Sussman 1996&lt;/a&gt;).
这本书的前半部分尝试教会读者: 如何在程序中建立抽象, 如何基于已有的抽象建立新的抽象.
后半部分介绍了在编程语言实现中常见的抽象.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>我发起了一个从 0 开始制作编程语言的项目 <a href="https://github.com/butterunderflow/fun-for-fun">fun for fun</a>.
该项目使用 OCaml 实现了一个编译器(称为 ff 编译器), 可以把一个 OCaml 的子集编译到可以 C++ 源程序
(生成程序只用到了 C 的语法),
该 C++ 程序可以被进一步编译为可执行文件.</p>
<h2 id="为什么又一个编译器教程">为什么又一个编译器教程</h2>
<p>为什么又又又一个关于编程语言实现的教程?</p>
<p>并不是已有的教学项目不够好/不足够, 现在高质量的编译器教程非常多(可以直接看最后一节看我的推荐目录).
之所以发起一个新的编译器教学项目, 主要有以下几方面的原因:</p>
<ol>
<li><strong><strong>实现一个编译器真的很有趣</strong></strong>: 我最开始是只是对 OCaml 的类型系统(主要是模块系统)的检查很感兴趣,
只是想着实现一个类型系统以加深一下自己的理解. 在完成类型系统的实现后, 每次只是想再往后再走一小步,
&ldquo;不知不觉&quot;就完成了一个到 C++ 的后端, 正如这个项目名称 Fun for Fun, 这件事情太有趣了使我一有时间就忍不住不做;</li>
<li><strong><strong>向前辈学习</strong></strong>: 现在的高质量编译器教学项目确实很多, 这些优秀的教程已经帮助我少走了很多弯路.
作为一个已经从前辈们的教学项目受益良多的人, 我认为不仅有必要学习他们传播的知识,
还有必要学习他们无私共享的精神, 我希望能通过文字说明和代码演示展示我对知识的理解和学习的过程,
让未来的学习者也能少走一些弯路;</li>
<li><strong><strong>与人沟通对理解深刻的知识是很有帮助</strong></strong>:
知识的理解, 从最 <strong><strong>看懂书本/论文上的介绍</strong></strong> 到 <strong><strong>能在实践中根据需要运用自如</strong></strong>, 是需要一个过程的,
对于一些比较深刻的知识, 这甚至可能是一个长期的过程.
通过给别人讲解, 可以帮助我站在多个角度重新思考问题, 从而加深我对知识的理解, 让我离事物的&quot;本质&quot;更进一步.</li>
</ol>
<h2 id="学习资料推荐">学习资料推荐</h2>
<h3 id="计算机程序构造与解释--sicp">计算机程序构造与解释(SICP)</h3>
<p>首先要推荐的是已经被很多人推荐过的 SICP (<a href="#citeproc_bib_item_1">Abelson and Sussman 1996</a>).
这本书的前半部分尝试教会读者: 如何在程序中建立抽象, 如何基于已有的抽象建立新的抽象.
后半部分介绍了在编程语言实现中常见的抽象.</p>
<p><strong><strong>抽象</strong></strong> 是这本书的主题(我一连说了 3 个 <strong><strong>抽象</strong></strong>), 一方面也暗示了这本书描述的内容十分的抽象(即使书里有演示代码),
另一方面也暗示了建立可靠&amp;可组合的抽象对实现编程语言的重要性.</p>
<p>我很庆幸当时听了知乎人的建议, 在&quot;生涯早期&quot;就学习了这本书,
如果有时间, 我希望我能重读一遍.</p>
<ul>
<li>注: 如果你和我一样在第一次看书时无法理解书上的内容, 公开课视频也许会有帮助,
因为公开课中的学生也许和我们有着一样的问题, 他们有可能会在课上帮我们把问题提出来.</li>
</ul>
<h3 id="types-ans-programming-language--tapl">Types ans Programming Language(TaPL)</h3>
<p>todo</p>
<h3 id="the-implementation-of-functional-programming-language--tiofpl">The Implementation of Functional Programming Language (TIoFPL)</h3>
<p>语言常见的两种实现模式: 编译和解释(<a href="/blog/articles/language-and-interpreters/">Language and Interpreters</a>).
对于编译实现, 很多人推荐学习龙书来学习, 但是我在费力的理解了书上的定义以后仍然云里雾里,
不知道实现一个编译器到底应该干嘛, 没能通过这本书学会编译原理.</p>
<p>TIoFPL 这本书给了我答案: 编译其实就是一个函数, 把一个语言的源程序映射至另一个语言.</p>
<p>一个函数式编程语言的实现贯穿着整本书, 这本书把这个足够复杂的函数式编程语言映射到足够底层的语言(X86 汇编).</p>
<p>最关键的是, 书中几乎看不到龙书里那样复杂的算法描述,
而是用很多个简单的函数来描述语言之间的映射, 每个函数做的事情都很少, 因此很容易验证它们正确性.
这些函数环环相扣地组合到一起变成一个大的函数, 这个大函数可以把源语言映射到目标语言, 整个过程相当精彩.</p>
<h3 id="计算理论导引">计算理论导引</h3>
<p>之前的书都没有解析将解析(parsing)的内容, 有人说如果对 parsing 感兴趣可以看龙书,
我认为但是龙书的严谨程度和清晰程度都不如这本 <span class="underline">计算理论导引</span>, 龙书parsing相关章节中的结论很多, 但是结论的证明是很少的,
取代证明的是大量的算法, 例子和演示.</p>
<p>我更喜欢 <span class="underline">计算理论导引</span> 的讲解方式: 只有少量的结论, 但是这些结论都通过严谨的推导得出.
而这些证明有的时候可以成为理解问题的关键.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Partial Evaluation for Lambda Calculus</title>
      <link>http://localhost:1313/blog/articles/20231111153704-partial_evaluation_for_lambda_calculus/</link>
      <pubDate>Sat, 02 Mar 2024 00:00:00 +0000</pubDate><author>azhong.934@gmail.com (butterunderflow)</author>
      <guid>http://localhost:1313/blog/articles/20231111153704-partial_evaluation_for_lambda_calculus/</guid>
      <description>&lt;p&gt;这是 &lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;[1]&lt;/a&gt; 第 8 章 &lt;em&gt;Partial Evaluation for Lambda Calculus&lt;/em&gt; 的笔记.&lt;/p&gt;
&lt;p&gt;在 &lt;a href=&#34;http://localhost:1313/blog/articles/partial-evaluation-for-functional/&#34;&gt;Partial Evaluation for Functional Language&lt;/a&gt; 和 &lt;a href=&#34;http://localhost:1313/blog/articles/partial-evaluation-for-flow-chart/&#34;&gt;Partial Evaluation For Flow Chart Langauge&lt;/a&gt; 中,
partial evaluation 所 eval 的东西很直观, 就是一个具体的像 int, bool 这样具体的值, 没有考虑高阶函数.&lt;/p&gt;
&lt;p&gt;但是对于有高阶函数的语言, 情况变得复杂, 因为一个表达式的求值结果可能是一个函数,
那么考虑一个简单的场景, 返回一个常量的函数, 应该标记为是 Static 还是 Dynamic ?
比如: &lt;code&gt;(lambda (x) 1)&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果标记为 S, 那这个函数在 residual program 中对应什么? 似乎也只能是 &lt;code&gt;(lambda (x) 1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果标记为 D, 为什么一个这么简单的函数会返回一个常量的函数需要标记为 D?
是不是对于 lambda 表达式 partial evaluation 都无能为力?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我会有这样的疑惑主要有两个原因:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;之前提到的 S 和 D 这样简单的 annotation 的标记对于简单的语言是足够的, 但是对于存在高阶函数的语言,
需要更丰富的 binding time annotation 才能描述&amp;quot;编译期函数&amp;quot;和&amp;quot;运行时函数&amp;quot;;&lt;/li&gt;
&lt;li&gt;标记为 D 和 S 的表达式都不一定会出现在最终的 residual program 中, 在有高阶函数的语言,
residual program 长什么样主要看 partial evaluation 的结果,
之前的 &amp;ldquo;Dynamic 表达式作为程序骨架, Static 表达式求值后嵌入程序骨架&amp;rdquo; 的基本直觉失效了.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本文将介绍 lambda calculus 的 partial evaluation.
首先将定义一个简单的 lambda calculus, 然后介绍它的 binding time annotation 和 annotated version,
最后再分别展示它的 Binding Time Analysis(由 lambda calculus 得到 Annotated Program)和
具体的 staging(由 annotated program 得到 residual program)算法.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>这是 <a href="#citeproc_bib_item_1">[1]</a> 第 8 章 <em>Partial Evaluation for Lambda Calculus</em> 的笔记.</p>
<p>在 <a href="/blog/articles/partial-evaluation-for-functional/">Partial Evaluation for Functional Language</a> 和 <a href="/blog/articles/partial-evaluation-for-flow-chart/">Partial Evaluation For Flow Chart Langauge</a> 中,
partial evaluation 所 eval 的东西很直观, 就是一个具体的像 int, bool 这样具体的值, 没有考虑高阶函数.</p>
<p>但是对于有高阶函数的语言, 情况变得复杂, 因为一个表达式的求值结果可能是一个函数,
那么考虑一个简单的场景, 返回一个常量的函数, 应该标记为是 Static 还是 Dynamic ?
比如: <code>(lambda (x) 1)</code></p>
<ol>
<li>如果标记为 S, 那这个函数在 residual program 中对应什么? 似乎也只能是 <code>(lambda (x) 1)</code></li>
<li>如果标记为 D, 为什么一个这么简单的函数会返回一个常量的函数需要标记为 D?
是不是对于 lambda 表达式 partial evaluation 都无能为力?</li>
</ol>
<p>我会有这样的疑惑主要有两个原因:</p>
<ol>
<li>之前提到的 S 和 D 这样简单的 annotation 的标记对于简单的语言是足够的, 但是对于存在高阶函数的语言,
需要更丰富的 binding time annotation 才能描述&quot;编译期函数&quot;和&quot;运行时函数&quot;;</li>
<li>标记为 D 和 S 的表达式都不一定会出现在最终的 residual program 中, 在有高阶函数的语言,
residual program 长什么样主要看 partial evaluation 的结果,
之前的 &ldquo;Dynamic 表达式作为程序骨架, Static 表达式求值后嵌入程序骨架&rdquo; 的基本直觉失效了.</li>
</ol>
<p>本文将介绍 lambda calculus 的 partial evaluation.
首先将定义一个简单的 lambda calculus, 然后介绍它的 binding time annotation 和 annotated version,
最后再分别展示它的 Binding Time Analysis(由 lambda calculus 得到 Annotated Program)和
具体的 staging(由 annotated program 得到 residual program)算法.</p>
<ul>
<li>本文所有代码都将用 OCaml 演示, 代码仓库在 <a href="https://github.com/butterunderflow/lambda_pe">https://github.com/butterunderflow/lambda_pe</a> ,
可以在这里 <a href="https://butter-xz.com/lambda_pe/">https://butter-xz.com/lambda_pe/</a> 在线体验 Lambda Calculus 的 Partial Evaluation;</li>
<li>有时候 Lambda Calulus 会被简写成 LC, Partial Evaluation 会被简写为 PE,
Binding Time Analysis 会被简写为 BTA.</li>
</ul>
<h2 id="lambda-calculus-的语法">Lambda-calculus 的语法</h2>
<p>labmda 表达式的语法定义如下:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ocaml" data-lang="ocaml"><span style="display:flex;"><span><span style="color:#75715e">(* expr1.ml, level 1 expression*)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> expr <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#a6e22e">EInt</span> <span style="color:#66d9ef">of</span> <span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#a6e22e">EVar</span> <span style="color:#66d9ef">of</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#a6e22e">ELam</span> <span style="color:#66d9ef">of</span> <span style="color:#66d9ef">string</span> <span style="color:#f92672">*</span> expr
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#a6e22e">ELet</span> <span style="color:#66d9ef">of</span> <span style="color:#66d9ef">string</span> <span style="color:#f92672">*</span> expr <span style="color:#f92672">*</span> expr
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#a6e22e">EApp</span> <span style="color:#66d9ef">of</span> expr <span style="color:#f92672">*</span> expr
</span></span></code></pre></div><h2 id="binding-time-annotation--for-lambda-calculus">Binding Time Annotation(for Lambda Calculus)</h2>
<p>有 partial evaluation 的语言有个 two-level type system, two-level 的意思是,
一个 level 对应编程语言原来的类型系统, 另一个就对应这个 annotation.</p>
<p>在之前章节里关于 Binding Time Annotation 的一个比较直观的理解是:
标记为 S 会被 eval 成值, D 会在 residual program 中被保留成代码.</p>
<ul>
<li>这还是比较好理解的, 但是 <code>D -&gt; S</code> 呢? <code>D -&gt; S -&gt; S</code> &hellip; 呢? 它们代表什么?</li>
</ul>
<p>Binding time annotation 和一般的 type annotation 很类似,
只不过他不是描述 <strong><strong>运行时(run time)</strong></strong> 类型信息的, 而是描述 <strong><strong>partial evaluation time</strong></strong> 的类型信息的,
这个类型信息只做了 code 和 value 的区分, 具体的 code 和 value 又有它们自己在 first-level 的类型.</p>
<p>这个标记的所描述的是 pe-time 过程中的类型信息,
标记为 D(ynamic) 的表达式在 pe 过程中会被求值为 code, 标记为 S(tatic) 的会被求值为 value,
标记为 <code>D -&gt; S</code> 的表达式在 specialize 过程中会转换为由 code 到 value 函数,
但是它们并不代表 residual program 中的最终形态.
也就是说, 标记为 S 和 D 的表达式都不一定会出现在 residual program 中.</p>
<h2 id="annotated-program--for-lambda-calculus">Annotated Program(for Lambda Calculus)</h2>
<p>Annotated Program 对应一个语言的 Two-level syntax</p>
<figure>
    <img loading="lazy" src="/ox-hugo/2023-11-19_18-16-54_screenshot.png"
         alt="Figure 1: two-level syntax for Scheme0"/> <figcaption>
            <p><span class="figure-number">Figure 1: </span>two-level syntax for Scheme0</p>
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/ox-hugo/2023-11-15_09-33-00_screenshot.png"
         alt="Figure 2: Lambda calculus 的 two-level syntax"/> <figcaption>
            <p><span class="figure-number">Figure 2: </span>Lambda calculus 的 two-level syntax</p>
        </figcaption>
</figure>

<p>带有 S 标记的表示这个表达式在 pe 过程中会 eval 到 value(可能是一般的值或函数值),
带有 D 标记的则会 eval 到 code.</p>
<ul>
<li>note: variable 没有标记, variable 的 pe 结果是从当前的 environment 中 lookup 的结果.</li>
</ul>
<!--listend-->
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ocaml" data-lang="ocaml"><span style="display:flex;"><span><span style="color:#75715e">(* expr2.ml, level 2 expression *)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> expr <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">(* use variable lookup as specialize result *)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> <span style="color:#a6e22e">Var</span> <span style="color:#66d9ef">of</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">(* specialize to a value(a pe time int or function value) *)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> <span style="color:#a6e22e">SConst</span> <span style="color:#66d9ef">of</span> constant
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> <span style="color:#a6e22e">SLam</span> <span style="color:#66d9ef">of</span> <span style="color:#66d9ef">string</span> <span style="color:#f92672">*</span> expr
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> <span style="color:#a6e22e">SLet</span> <span style="color:#66d9ef">of</span> <span style="color:#66d9ef">string</span> <span style="color:#f92672">*</span> expr <span style="color:#f92672">*</span> expr
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> <span style="color:#a6e22e">SApp</span> <span style="color:#66d9ef">of</span> expr <span style="color:#f92672">*</span> expr
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">(* specialize to a pe-time code expression *)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> <span style="color:#a6e22e">DLam</span> <span style="color:#66d9ef">of</span> <span style="color:#66d9ef">string</span> <span style="color:#f92672">*</span> expr
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> <span style="color:#a6e22e">DLet</span> <span style="color:#66d9ef">of</span> <span style="color:#66d9ef">string</span> <span style="color:#f92672">*</span> expr <span style="color:#f92672">*</span> expr
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> <span style="color:#a6e22e">DApp</span> <span style="color:#66d9ef">of</span> expr <span style="color:#f92672">*</span> expr
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> <span style="color:#a6e22e">DLift</span> <span style="color:#66d9ef">of</span> expr
</span></span><span style="display:flex;"><span><span style="color:#f92672">[@@</span>deriving sexp<span style="color:#f92672">]</span>
</span></span></code></pre></div><h2 id="binding-time-analysis">Binding Time Analysis</h2>
<p>LC 的 Binding Time Analysis 就是把 LC 编译到 2LC 的过程, 我们可以这样定义 BTA 的接口:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ocaml" data-lang="ocaml"><span style="display:flex;"><span><span style="color:#66d9ef">module</span> <span style="color:#66d9ef">type</span> <span style="color:#a6e22e">BTA_Sig</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">sig</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">val</span> analysis <span style="color:#f92672">:</span> Expr1.expr <span style="color:#f92672">-&gt;</span> Expr2.expr
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span>
</span></span></code></pre></div><h3 id="naive-bta">Naive BTA</h3>
<p>BTA 是一个比较泛的概念, 并没有唯一正确的做法, 比如说什么都不干,
把所有东西都当作 Dynamic 也是一种可行的 BTA:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ocaml" data-lang="ocaml"><span style="display:flex;"><span><span style="color:#66d9ef">module</span> <span style="color:#a6e22e">NaiveBTA</span> <span style="color:#f92672">:</span> <span style="color:#a6e22e">BTA_Sig</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">struct</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">(* blindly push every thing to runtime *)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">let</span> analysis <span style="color:#f92672">(</span>e <span style="color:#f92672">:</span> E1.expr<span style="color:#f92672">)</span> <span style="color:#f92672">:</span> E2.expr <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">rec</span> go e <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">match</span> e <span style="color:#66d9ef">with</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">|</span> E1.<span style="color:#a6e22e">EConst</span> c <span style="color:#f92672">-&gt;</span> E2.<span style="color:#a6e22e">SConst</span> c
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">|</span> E1.<span style="color:#a6e22e">EVar</span> x <span style="color:#f92672">-&gt;</span> E2.<span style="color:#a6e22e">Var</span> x
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">|</span> E1.<span style="color:#a6e22e">ELam</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> e0<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> E2.<span style="color:#a6e22e">DLam</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> go e0<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">|</span> E1.<span style="color:#a6e22e">ELet</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> e0<span style="color:#f92672">,</span> e1<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> E2.<span style="color:#a6e22e">DLet</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> go e0<span style="color:#f92672">,</span> go e1<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">|</span> E1.<span style="color:#a6e22e">EApp</span> <span style="color:#f92672">(</span>e0<span style="color:#f92672">,</span> e1<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> E2.<span style="color:#a6e22e">DApp</span> <span style="color:#f92672">(</span>go e0<span style="color:#f92672">,</span> go e1<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>    go e
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span>
</span></span></code></pre></div><h3 id="naive-bta">Naive BTA'</h3>
<p>另一个极端是把所有东西都当作 static, 这么做当然也是可行的(只是没什么意义):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ocaml" data-lang="ocaml"><span style="display:flex;"><span><span style="color:#75715e">(* blindly stage every thing to compile time *)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> analysis <span style="color:#f92672">(</span>e <span style="color:#f92672">:</span> E1.expr<span style="color:#f92672">)</span> <span style="color:#f92672">:</span> E2.expr <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">rec</span> go e <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">match</span> e <span style="color:#66d9ef">with</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">|</span> E1.<span style="color:#a6e22e">EConst</span> c <span style="color:#f92672">-&gt;</span> E2.<span style="color:#a6e22e">SConst</span> c
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">|</span> E1.<span style="color:#a6e22e">EVar</span> x <span style="color:#f92672">-&gt;</span> E2.<span style="color:#a6e22e">Var</span> x
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">|</span> E1.<span style="color:#a6e22e">ELam</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> e0<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> E2.<span style="color:#a6e22e">SLam</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> go e0<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">|</span> E1.<span style="color:#a6e22e">ELet</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> e0<span style="color:#f92672">,</span> e1<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> E2.<span style="color:#a6e22e">SLet</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> go e0<span style="color:#f92672">,</span> go e1<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">|</span> E1.<span style="color:#a6e22e">EApp</span> <span style="color:#f92672">(</span>e0<span style="color:#f92672">,</span> e1<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> E2.<span style="color:#a6e22e">SApp</span> <span style="color:#f92672">(</span>go e0<span style="color:#f92672">,</span> go e1<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">|</span> E1.<span style="color:#a6e22e">EAnn</span> <span style="color:#f92672">(</span>e0<span style="color:#f92672">,</span> <span style="color:#f92672">_)</span> <span style="color:#f92672">-&gt;</span> go e0
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">|</span> E1.<span style="color:#a6e22e">EOp</span> <span style="color:#f92672">(</span>op<span style="color:#f92672">,</span> es<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> E2.<span style="color:#a6e22e">SOp</span> <span style="color:#f92672">(</span>op<span style="color:#f92672">,</span> List.map go es<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>  go e
</span></span></code></pre></div><h3 id="bta-by-type-check">BTA by type check</h3>
<p>前面两个 NaiveBTA 是&quot;对&quot; 的吗? 当然是对的, 但是这其实没有意义, 因为我们没办法对 annotated program 做 staging
(staging nothing 和 staging everything).</p>
<p>前面提到了, BTA 的结果是不唯一的, 既然不唯一, 那要如何选择一个表达式的 annotation 呢?</p>
<p>比如说下面的代码, f 既 apply 到了 1(a static)上, 又 apply 到了 y(a dynamic)上, 如何确定 f 的 annotation?
很多种可行解.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ocaml" data-lang="ocaml"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> f <span style="color:#f92672">=</span> <span style="color:#66d9ef">fun</span> x <span style="color:#f92672">-&gt;</span> x <span style="color:#66d9ef">in</span>  <span style="color:#75715e">(* f: D; D-&gt;D; S-&gt;S; (S-&gt;S) -&gt; (S-&gt;S) ... *)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span> f 1 <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span> f y <span style="color:#f92672">...</span> <span style="color:#75715e">(* y is dynamic *)</span>
</span></span></code></pre></div><p>如果我们只看 <code>f 1</code> , 那么 <code>f</code> 只能是 <code>S -&gt; 'a</code>, <code>D</code> , <code>D -&gt; 'a</code> (1可以被lift为Dynamic);
如果只看 <code>f y</code>, 那么 <code>f</code> 只能是 <code>D -&gt; 'a</code>, <code>D</code> .</p>
<p>书上介绍了一种约束收集+求解的方法, 定义了一个 annotation 上的偏序关系,
然后通过求解收集到的约束得到最小的解.</p>
<p>这个方法太复杂了, 一堆偏序关系头都要晕了, 如果有感兴趣的话可以看 <a href="#citeproc_bib_item_1">[1]</a> 的 <code>8.7 BTA by solving constraints</code> .</p>
<p>这里选择另一种简单点的方法作为实现.
首先, 为了让 bta 变得简单, 我们给 LC1 加上一个 binding time annotation 注解的语法,
让我们可以手动的为表达式添加 annotation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ocaml" data-lang="ocaml"><span style="display:flex;"><span><span style="color:#f92672">and</span> expr <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> <span style="color:#a6e22e">EConst</span> <span style="color:#66d9ef">of</span> constant
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> <span style="color:#a6e22e">EVar</span> <span style="color:#66d9ef">of</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> <span style="color:#a6e22e">ELam</span> <span style="color:#66d9ef">of</span> <span style="color:#66d9ef">string</span> <span style="color:#f92672">*</span> expr
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> <span style="color:#a6e22e">ELet</span> <span style="color:#66d9ef">of</span> <span style="color:#66d9ef">string</span> <span style="color:#f92672">*</span> expr <span style="color:#f92672">*</span> expr
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> <span style="color:#a6e22e">EApp</span> <span style="color:#66d9ef">of</span> expr <span style="color:#f92672">*</span> expr
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> <span style="color:#a6e22e">EAnn</span> <span style="color:#66d9ef">of</span> expr <span style="color:#f92672">*</span> Ann.t <span style="color:#75715e">(* Binding time annotation hint *)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> <span style="color:#a6e22e">EOp</span> <span style="color:#66d9ef">of</span> op <span style="color:#f92672">*</span> expr <span style="color:#66d9ef">list</span>
</span></span></code></pre></div><p>然后用 ML 类型推导的方式(不需要偏序关系, 仅仅需要等价关系)推导一个表达式的 Binding Time Annotation,
根据这个 Annotation 来得到 level 2 expression.</p>
<p>这里我们借用 <a href="/blog/articles/20230901095515-local_type_inference/">Local Type Inference</a> 中 bidirectional type checking 的思路,
把 bta 分为两种 mode:</p>
<ol>
<li>check mode: 已知一个表达式的 annotation <code>a</code>, 验证这个表达式的 annotation 是否等于 <code>a</code>;</li>
<li>infer mode: 对表达式的 annotation 一无所知, 需要推导这个表达式的 annotation.</li>
</ol>
<p>bidirectional type checking 可以把已经推导出的类型信息传递到相邻的语法树节点,
使得我们可以仅仅只写少量的 binding time annotation 注解就可以推导所有节点的 annotation.</p>
<p>具体的代码实现如下:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ocaml" data-lang="ocaml"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#66d9ef">rec</span> infer <span style="color:#f92672">(</span>e <span style="color:#f92672">:</span> E1.expr<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>env <span style="color:#f92672">:</span> ann_env<span style="color:#f92672">)</span> <span style="color:#f92672">:</span> E2.expr <span style="color:#f92672">*</span> ann <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">match</span> e <span style="color:#66d9ef">with</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> E1.<span style="color:#a6e22e">EConst</span> c <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">(</span>E2.<span style="color:#a6e22e">SConst</span> c<span style="color:#f92672">,</span> <span style="color:#a6e22e">S</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> E1.<span style="color:#a6e22e">EVar</span> x <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">(</span>E2.<span style="color:#a6e22e">Var</span> x<span style="color:#f92672">,</span> get x env<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> E1.<span style="color:#a6e22e">ELam</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> e0<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> failwith <span style="color:#e6db74">&#34;can&#39;t infer a lambda&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> E1.<span style="color:#a6e22e">ELet</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> e0<span style="color:#f92672">,</span> e1<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">let</span> e0&#39;<span style="color:#f92672">,</span> a0&#39; <span style="color:#f92672">=</span> infer e0 env <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">match</span> a0&#39; <span style="color:#66d9ef">with</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">|</span> <span style="color:#a6e22e">D</span> <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">(</span>E2.<span style="color:#a6e22e">DLet</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> e0&#39;<span style="color:#f92672">,</span> check e1 Ann.<span style="color:#a6e22e">D</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">,</span> a0&#39;<span style="color:#f92672">)</span> <span style="color:#f92672">::</span> env<span style="color:#f92672">)),</span> <span style="color:#a6e22e">D</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">|</span> <span style="color:#f92672">_</span> <span style="color:#f92672">-&gt;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">let</span> e1&#39;<span style="color:#f92672">,</span> a1&#39; <span style="color:#f92672">=</span> infer e1 <span style="color:#f92672">((</span>x<span style="color:#f92672">,</span> a0&#39;<span style="color:#f92672">)</span> <span style="color:#f92672">::</span> env<span style="color:#f92672">)</span> <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">(</span>E2.<span style="color:#a6e22e">SLet</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> e0&#39;<span style="color:#f92672">,</span> e1&#39;<span style="color:#f92672">),</span> a1&#39;<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> E1.<span style="color:#a6e22e">EApp</span> <span style="color:#f92672">(</span>e0<span style="color:#f92672">,</span> e1<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">let</span> e0&#39;<span style="color:#f92672">,</span> a0&#39; <span style="color:#f92672">=</span> infer e0 env <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">match</span> a0&#39; <span style="color:#66d9ef">with</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">|</span> <span style="color:#a6e22e">S</span> <span style="color:#f92672">-&gt;</span> failwith <span style="color:#e6db74">&#34;error&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">|</span> <span style="color:#a6e22e">D</span> <span style="color:#f92672">-&gt;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">let</span> e1&#39; <span style="color:#f92672">=</span> check e1 Ann.<span style="color:#a6e22e">D</span> env <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">(</span>E2.<span style="color:#a6e22e">DApp</span> <span style="color:#f92672">(</span>e0&#39;<span style="color:#f92672">,</span> e1&#39;<span style="color:#f92672">),</span> Ann.<span style="color:#a6e22e">D</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">|</span> <span style="color:#a6e22e">Func</span> <span style="color:#f92672">(</span>arg_ann<span style="color:#f92672">,</span> ret_ann<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">let</span> e1&#39; <span style="color:#f92672">=</span> check e1 arg_ann env <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">(</span>E2.<span style="color:#a6e22e">SApp</span> <span style="color:#f92672">(</span>e0&#39;<span style="color:#f92672">,</span> e1&#39;<span style="color:#f92672">),</span> ret_ann<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> E1.<span style="color:#a6e22e">EAnn</span> <span style="color:#f92672">(</span>e0<span style="color:#f92672">,</span> a0<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">(</span>check e0 a0 env<span style="color:#f92672">,</span> a0<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> E1.<span style="color:#a6e22e">EOp</span> <span style="color:#f92672">(</span>op<span style="color:#f92672">,</span> es<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">match</span> <span style="color:#f92672">(</span>op<span style="color:#f92672">,</span> es<span style="color:#f92672">)</span> <span style="color:#66d9ef">with</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">|</span> <span style="color:#a6e22e">OAdd</span><span style="color:#f92672">,</span> <span style="color:#f92672">[</span> e0<span style="color:#f92672">;</span> e1 <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">|</span> <span style="color:#a6e22e">OMinus</span><span style="color:#f92672">,</span> <span style="color:#f92672">[</span> e0<span style="color:#f92672">;</span> e1 <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">|</span> <span style="color:#a6e22e">OAnd</span><span style="color:#f92672">,</span> <span style="color:#f92672">[</span> e0<span style="color:#f92672">;</span> e1 <span style="color:#f92672">]</span> <span style="color:#f92672">-&gt;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">let</span> e0&#39;<span style="color:#f92672">,</span> a0&#39; <span style="color:#f92672">=</span> infer e0 env <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">let</span> e1&#39; <span style="color:#f92672">=</span> check e1 a0&#39; env <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">(</span>E2.<span style="color:#a6e22e">SOp</span> <span style="color:#f92672">(</span>op<span style="color:#f92672">,</span> <span style="color:#f92672">[</span> e0&#39;<span style="color:#f92672">;</span> e1&#39; <span style="color:#f92672">]),</span> a0&#39;<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">|</span> <span style="color:#a6e22e">ONot</span><span style="color:#f92672">,</span> <span style="color:#f92672">[</span> e0 <span style="color:#f92672">]</span> <span style="color:#f92672">-&gt;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">let</span> e0&#39;<span style="color:#f92672">,</span> a0&#39; <span style="color:#f92672">=</span> infer e0 env <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">(</span>E2.<span style="color:#a6e22e">SOp</span> <span style="color:#f92672">(</span>op<span style="color:#f92672">,</span> <span style="color:#f92672">[</span> e0&#39; <span style="color:#f92672">]),</span> <span style="color:#a6e22e">D</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">|</span> <span style="color:#f92672">_</span> <span style="color:#f92672">-&gt;</span> failwith <span style="color:#e6db74">&#34;neverreach&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">and</span> check <span style="color:#f92672">(</span>e <span style="color:#f92672">:</span> E1.expr<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>a <span style="color:#f92672">:</span> ann<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>env <span style="color:#f92672">:</span> ann_env<span style="color:#f92672">)</span> <span style="color:#f92672">:</span> E2.expr <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">match</span> e <span style="color:#66d9ef">with</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> E1.<span style="color:#a6e22e">ELam</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> e0<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> check_lambda x e0 a env
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> <span style="color:#f92672">_</span> <span style="color:#f92672">-&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">let</span> e&#39;<span style="color:#f92672">,</span> a&#39; <span style="color:#f92672">=</span> infer e env <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> a&#39; <span style="color:#f92672">=</span> a <span style="color:#66d9ef">then</span> e&#39;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> a&#39; <span style="color:#f92672">=</span> <span style="color:#a6e22e">S</span> <span style="color:#f92672">&amp;&amp;</span> a <span style="color:#f92672">=</span> <span style="color:#a6e22e">D</span> <span style="color:#66d9ef">then</span> E2.<span style="color:#a6e22e">DLift</span> e&#39;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">else</span> failwith <span style="color:#e6db74">&#34;error&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">and</span> check_lambda x e a env <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">match</span> a <span style="color:#66d9ef">with</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> <span style="color:#a6e22e">S</span> <span style="color:#f92672">-&gt;</span> failwith <span style="color:#e6db74">&#34;error lambda annotation&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> <span style="color:#a6e22e">D</span> <span style="color:#f92672">-&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">let</span> e&#39; <span style="color:#f92672">=</span> check e <span style="color:#a6e22e">D</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">,</span> <span style="color:#a6e22e">D</span><span style="color:#f92672">)</span> <span style="color:#f92672">::</span> env<span style="color:#f92672">)</span> <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>      E2.<span style="color:#a6e22e">DLam</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> e&#39;<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> <span style="color:#a6e22e">Func</span> <span style="color:#f92672">(</span>arg_ann<span style="color:#f92672">,</span> ret_ann<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">let</span> e&#39; <span style="color:#f92672">=</span> check e ret_ann <span style="color:#f92672">((</span>x<span style="color:#f92672">,</span> arg_ann<span style="color:#f92672">)</span> <span style="color:#f92672">::</span> env<span style="color:#f92672">)</span> <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>      E2.<span style="color:#a6e22e">SLam</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> e&#39;<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> analysis <span style="color:#f92672">(</span>e <span style="color:#f92672">:</span> E1.expr<span style="color:#f92672">)</span> <span style="color:#f92672">:</span> E2.expr <span style="color:#f92672">=</span> infer e empty_env <span style="color:#f92672">|&gt;</span> fst
</span></span></code></pre></div><h2 id="staging">Staging!</h2>
<blockquote>
<p>万事俱备, 只欠 staging.</p></blockquote>
<p>LC 的 two-level syntax 类似于之前在 partial evaluation for Scheme0 提到的 <a href="/blog/articles/partial-evaluation-for-functional/#通过binding-time-annotation提高specialization算法的效率">Binding Time Annotation</a> ,
但是在值域上有所差异:</p>
<ol>
<li>Scheme0 的值域只能是 Constant 所在的值域(称之为 Const);</li>
<li>lambda calculus 的值域可以是高阶函数:
高阶函数的值域(2FuncVal)是很丰富的:
不仅可以是 \(Const \rightarrow Cosnt\) 的函数;
可以是 \(2FuncVal \rightarrow 2FuncVal\);
还可以是 \(Code\) &hellip; .</li>
</ol>
<p>在做完 BTA 后, staging 的实现就很简单了, LC2 的 staging 其实也可以看作 two-level lambda calculus(2LC)的 interpreter!
只是在值域上有所差异, 这个 2LC 的值域在 LC 的基础上加上了 Code,
对于 2LC 表达式的求值结果可能是:</p>
<ol>
<li>求值到 Const 或 FuncVal, 代表这个表达式已经求值完了;</li>
<li>还可能求值到一个 Code, 这个 Code 等之后再去算.</li>
</ol>
<p>dlambda 的 body 也必须求值到 code, 然后再通过 build-lambda 创建一个动态求知 lambda 表达式.
但是这里为什么要用 <code>newname</code>? 书上说是为了避免 confusion,
我理解这个完全是为了 residual program 可读性和 specialize 算法的可维护性考虑的, 就算不重命名也不会导致 bug.</p>
<p>staging的代码实现如下:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ocaml" data-lang="ocaml"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#66d9ef">rec</span> eval <span style="color:#f92672">(</span>e <span style="color:#f92672">:</span> expr<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>env <span style="color:#f92672">:</span> env<span style="color:#f92672">)</span> <span style="color:#f92672">:</span> <span style="color:#66d9ef">value</span> <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">match</span> e <span style="color:#66d9ef">with</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#a6e22e">Var</span> x <span style="color:#f92672">-&gt;</span> List.assoc x env
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#a6e22e">DLam</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> e<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> new_var <span style="color:#f92672">=</span> gen_var <span style="color:#f92672">~</span>hint<span style="color:#f92672">:</span>x <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">VCode</span> <span style="color:#f92672">(</span>E1.<span style="color:#a6e22e">ELam</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> eval e <span style="color:#f92672">((</span>x<span style="color:#f92672">,</span> <span style="color:#a6e22e">VCode</span> new_var<span style="color:#f92672">)</span> <span style="color:#f92672">::</span> env<span style="color:#f92672">)</span> <span style="color:#f92672">|&gt;</span> get_code<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#a6e22e">DLet</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> e0<span style="color:#f92672">,</span> e1<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> updated_env <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> <span style="color:#a6e22e">VCode</span> <span style="color:#f92672">(</span>E1.<span style="color:#a6e22e">EVar</span> x<span style="color:#f92672">))</span> <span style="color:#f92672">::</span> env <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">VCode</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">(</span><span style="color:#66d9ef">match</span> eval e0 env <span style="color:#66d9ef">with</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">|</span> <span style="color:#a6e22e">VCode</span> code <span style="color:#f92672">-&gt;</span> E1.<span style="color:#a6e22e">ELet</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> code<span style="color:#f92672">,</span> eval e1 updated_env <span style="color:#f92672">|&gt;</span> get_code<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">|</span> <span style="color:#a6e22e">VConst</span> c <span style="color:#f92672">-&gt;</span>
</span></span><span style="display:flex;"><span>          E1.<span style="color:#a6e22e">ELet</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> E1.<span style="color:#a6e22e">EConst</span> c<span style="color:#f92672">,</span> eval e1 updated_env <span style="color:#f92672">|&gt;</span> get_code<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">|</span> <span style="color:#a6e22e">VFun</span> f <span style="color:#f92672">-&gt;</span>
</span></span><span style="display:flex;"><span>          E1.<span style="color:#a6e22e">ELet</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">(</span> x<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>              f <span style="color:#f92672">(</span><span style="color:#a6e22e">VCode</span> <span style="color:#f92672">(</span>E1.<span style="color:#a6e22e">EVar</span> <span style="color:#e6db74">&#34;_x&#34;</span><span style="color:#f92672">))</span> <span style="color:#f92672">|&gt;</span> get_code<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>              eval e1 updated_env <span style="color:#f92672">|&gt;</span> get_code <span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#a6e22e">DApp</span> <span style="color:#f92672">(</span>e0<span style="color:#f92672">,</span> e1<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">VCode</span> <span style="color:#f92672">(</span>E1.<span style="color:#a6e22e">EApp</span> <span style="color:#f92672">(</span>eval e0 env <span style="color:#f92672">|&gt;</span> get_code<span style="color:#f92672">,</span> eval e1 env <span style="color:#f92672">|&gt;</span> get_code<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#a6e22e">DLift</span> e <span style="color:#f92672">-&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> v <span style="color:#f92672">=</span> get_int <span style="color:#f92672">(</span>eval e env<span style="color:#f92672">)</span> <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">VCode</span> <span style="color:#f92672">(</span>E1.<span style="color:#a6e22e">EConst</span> v<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#a6e22e">SConst</span> c <span style="color:#f92672">-&gt;</span> <span style="color:#a6e22e">VConst</span> c
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#a6e22e">SLam</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> e<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> <span style="color:#a6e22e">VFun</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">fun</span> v <span style="color:#f92672">-&gt;</span> eval e <span style="color:#f92672">((</span>x<span style="color:#f92672">,</span> v<span style="color:#f92672">)</span> <span style="color:#f92672">::</span> env<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#a6e22e">SLet</span> <span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> e0<span style="color:#f92672">,</span> e1<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> bind_value <span style="color:#f92672">=</span> eval e0 env <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>    eval e1 <span style="color:#f92672">((</span>x<span style="color:#f92672">,</span> bind_value<span style="color:#f92672">)</span> <span style="color:#f92672">::</span> env<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#a6e22e">SApp</span> <span style="color:#f92672">(</span>e0<span style="color:#f92672">,</span> e1<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> func <span style="color:#f92672">=</span> get_func <span style="color:#f92672">(</span>eval e0 env<span style="color:#f92672">)</span> <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>    eval e1 env <span style="color:#f92672">|&gt;</span> func
</span></span></code></pre></div><h2 id="thinking">thinking</h2>
<p>Offline PE 中 annotated language(比如 2LC) 和 typeset language 的是否会存在某种同构?</p>
<h2 id="references">References</h2>
<style>.csl-left-margin{float: left; padding-right: 0em;}
 .csl-right-inline{margin: 0 0 0 1em;}</style><div class="csl-bib-body">
  <div class="csl-entry"><a id="citeproc_bib_item_1"></a>
    <div class="csl-left-margin">[1]</div><div class="csl-right-inline">N. D. Jones, C. K. Gomard, and P. Sestoft, <i>Partial Evaluation and Automatic Program Generation</i>. USA: Prentice-Hall, Inc., 1993.</div>
  </div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Offline and Online Partial Evaluation</title>
      <link>http://localhost:1313/blog/articles/20231014172106-offline_and_online_partial_evaluation/</link>
      <pubDate>Sun, 05 Nov 2023 00:00:00 +0000</pubDate><author>azhong.934@gmail.com (butterunderflow)</author>
      <guid>http://localhost:1313/blog/articles/20231014172106-offline_and_online_partial_evaluation/</guid>
      <description>&lt;p&gt;关于 &lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;[1]&lt;/a&gt; 的第7章 &lt;em&gt;Offline and Online Partial Evaluation&lt;/em&gt; 的笔记&lt;/p&gt;
&lt;h2 id=&#34;offline-和-online-指的是什么&#34;&gt;Offline 和 Online 指的是什么?&lt;/h2&gt;
&lt;p&gt;Offline 和 Online 的区别在于 Binding Time Analysis 的时机:
Offline 会提前把 &lt;a href=&#34;http://localhost:1313/blog/articles/partial-evaluation-for-flow-chart/#division&#34;&gt;Binding Time Analysis&lt;/a&gt; (BTA)做完, 并保证 binding time 的相合性,
再基于 BTA 的结果(可以由 Division 或 Annotated Program 表示)进行 specialize;
Online 会直接基于输入的程序做 specialize, 在 specialize 的过程中保证 congruence.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/blog/ox-hugo/2023-11-05_20-22-15_screenshot.png&#34;
         alt=&#34;Figure 1: Online 方法和 Offline 方法的结构&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Online 方法和 Offline 方法的结构&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/blog/ox-hugo/2023-10-20_14-07-55_screenshot.png&#34;
         alt=&#34;Figure 2: Online 方法和 Offline 方法的定义&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 2: &lt;/span&gt;Online 方法和 Offline 方法的定义&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;online-方法的分析&#34;&gt;Online 方法的分析&lt;/h3&gt;
&lt;p&gt;OnPE 方法的类型签名:
\[ Expression \rightarrow On-Env \rightarrow On-Value \]&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>关于 <a href="#citeproc_bib_item_1">[1]</a> 的第7章 <em>Offline and Online Partial Evaluation</em> 的笔记</p>
<h2 id="offline-和-online-指的是什么">Offline 和 Online 指的是什么?</h2>
<p>Offline 和 Online 的区别在于 Binding Time Analysis 的时机:
Offline 会提前把 <a href="/blog/articles/partial-evaluation-for-flow-chart/#division">Binding Time Analysis</a> (BTA)做完, 并保证 binding time 的相合性,
再基于 BTA 的结果(可以由 Division 或 Annotated Program 表示)进行 specialize;
Online 会直接基于输入的程序做 specialize, 在 specialize 的过程中保证 congruence.</p>
<figure>
    <img loading="lazy" src="/ox-hugo/2023-11-05_20-22-15_screenshot.png"
         alt="Figure 1: Online 方法和 Offline 方法的结构"/> <figcaption>
            <p><span class="figure-number">Figure 1: </span>Online 方法和 Offline 方法的结构</p>
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/ox-hugo/2023-10-20_14-07-55_screenshot.png"
         alt="Figure 2: Online 方法和 Offline 方法的定义"/> <figcaption>
            <p><span class="figure-number">Figure 2: </span>Online 方法和 Offline 方法的定义</p>
        </figcaption>
</figure>

<h3 id="online-方法的分析">Online 方法的分析</h3>
<p>OnPE 方法的类型签名:
\[ Expression \rightarrow On-Env \rightarrow On-Value \]</p>
<p>其中 \(On-Value\) 是 specialize 的结果, 是一个 Variant(tagged union):
如果表达式在\(On-Env\)中是 static 的, 则 specialize 到一个值(inVal); 如果表达式在\(On-Env\)中是 dynamic 的, 则 specialize 到一个表达式(inExp).</p>
<p>\(On-Env = Var \rightarrow On-Value\)包含了\(Expression\)中变量的绑定信息:
如果变量是 static 的, 则 specialize 到一个值(inVal); 如果是 dynamic 的, 则 specialize 到一个表达式(inExp).</p>
<p>为什么 OffPE 没有这样的区分呢? 因为 OffPE 在 BTA 中就分析了哪些表达式会 specialize 到 Value,
哪些会 specialize 到 Expression, 然后通过 division 或者 binding time annotation 表示这一信息.</p>
<p>OnPE 的含义是: 输入一个源程序的表达式(<code>Expression</code>),
和这个表达式中的自由变量在 residual program 中对应的 specialized expression(<code>On-Env = Var -&gt; On-Value</code>),
如果是 static 则绑定到值, 如果是 dynamic 则直接绑定到一个变量表达式.
返回一个 specialized expression(<code>On-Value</code>).</p>
<p>Online 方法的输入是不区分 subject program 中的 static 和 dynamic exppression 的,
也就是说 Online 方法直接在输入源程序上进行变换.
因此可以在 specialize 的过程中&quot;实时的&quot;根据当前的 specialize 上下文判断输入的表达式是不是 static 的,
因此相比与 Offline 方法, Online 方法可以把更多的表达式视作为 static(发现更多的 specialize 机会).</p>
<h3 id="offline-方法的分析">Offline 方法的分析</h3>
<p>而 OffPE 的类型签名:
\[ 2Expression \rightarrow Off-Env \rightarrow Off-Value \]</p>
<p>其中 <code>2Expression</code> 代表了经过 <a href="/blog/articles/partial-evaluation-for-flow-chart/#division">Binding Time Analysis</a> 后得到的 annotated program.
OffPE 的含义是: 输入一个经过标注了 Binding Time 的 <code>2Expression</code> 表达式,
和一个 <code>Off-Env</code> 包含这个表达式中的自由变量的 Binding Time(<code>Off-Value</code> 是一个 untaged union:
可以是 static 的 <code>Value</code>, 也可以是一个代表需要动态求值的 <code>1Expression</code>).
返回一个 specialized expression(<code>Off-Value</code>).</p>
<p>BTA 保证了当一个变量出现在程序中需要 static value 的位置的时候,
<code>Off-Env</code> 中的 lookup result 一定是一个 value,
所以在 OffPE 中无需再对 OffPE 的返回值的类型进行判断, 直接把返回值放在需要它的位置就好了.</p>
<h2 id="为什么-online-partial-evaluation-对-self-application-不友好">为什么 online partial evaluation 对 self application 不友好?</h2>
<p>OnPE 的类型签名:
\[ Expression \rightarrow On-Env \rightarrow On-Value \]</p>
<p>光从类型上来看, OnPE 的类型和二村映射的类型是完全匹配的,
但是在通过 OnPE 实现第二二村映射生成 compiler 的表现却并不好, 书中给出了一个例子说明这一点:</p>
<p><code>(cons(car names)(car values))</code> 是解释器中的表达式, <code>names</code> 和 <code>value</code> 都是解释器中的变量.
在应用把 <code>OnPE[OnPE, int]</code> 的后, 会得到如下程序片段,</p>
<figure>
    <img loading="lazy" src="/ox-hugo/2023-11-05_16-27-17_screenshot.png"/> 
</figure>

<p>在 \(OnPE(int, prog)\) 的时候, \(lookup [names] rho\) 的返回值总是一个包含 prog 中的表达式的 <code>Value</code>,
但是在上面 \(OnPE(OnPE, int)\) 生成的程序中, 其对 \(lookup_{names} rho\) 的返回值也进行了判断.</p>
<p>从直觉上, 这样的&quot;反常&quot;现象可以由两方面来解释:</p>
<ol>
<li>生成的 compiler 会从 OnPE 继承一些行为:
OnPE 需要处理所有可能的 subject program 中的表达式,
并判断表达式在 On-Env 下是 static 还是 dynamic,
因此使用 OnPE 的返回值时需要根据返回值是 Value 还是 Expr 分别处理;
但是 \(OnPE(int, prog)\) 的时候, 有一些表达式一定是 Value,
比如说\(lookup [names] rho\), 但在 self application 的时候没有利用这一信息;</li>
<li><code>OnPE</code> 具有通用性(generality), 其能力对于实现二村映射来说&quot;过剩&quot;了:
OnPE 对输入的类型没有任何限制, 对 <strong><strong>任意</strong></strong> 程序都可以specialize到其 <strong><strong>任意</strong></strong> 输入.
OnPE 的输入 On-Env 中包含了 subject program 中的变量到 <code>OnVal</code> 的映射,
而 <code>OnVal = Value | Expr</code> 中的 Value 可以是任意类型的 program text 也可以是一般的数据,
但是在几个二村映射中 Env 中所绑定的都是 program text,
(比如说 mix(int, prog), mix(mix, int) 的时候, On-Env 中的 Value 绑定到的就分别是源程序和解释器程序的 program text).
而 OnPE 中没有对这种&quot;程序的输入本身是程序&quot;情况做特殊的考虑:&ldquo;不管 subject program 的获得哪种输入, 我都把它们嵌入到 subject program 中&rdquo;.
也就是说, 我们甚至可以把 OnPE 应用到程序的输入, 生成一个没有什么实际意义的 <code>crazy</code> 程序,
这个 <code>crazy</code> 的语义是: 接受源程序然后得到源程序的运行结果.
而这样的一般性也被带到了由 <code>OnPE [OnPE, int]</code> 生成的 compiler 中: 在 <code>OnPE [OnPE, int]</code> 的输入 On-Env 中,
既可以绑定源程序片段, 从而得到编译器; 也可以绑定源程序的输入, 从而得到 <code>crazy</code>.</li>
</ol>
<figure>
    <img loading="lazy" src="/ox-hugo/2023-11-05_16-16-17_screenshot.png"
         alt="Figure 3: crazy 程序的语义"/> <figcaption>
            <p><span class="figure-number">Figure 3: </span>crazy 程序的语义</p>
        </figcaption>
</figure>

<h3 id="通过消除一般性以更好的-self-applicatoin">通过消除一般性以更好的 self-Applicatoin</h3>
<p>刚刚提到, OnPE 是具有通用性(generality)的: 想在 On-Env 中绑定什么都行, 只要它能作为 subject program 的输入.
但是在二村映射中, 这样的一般性是不必要的, 因为静态输入的参数已经确定了&ndash;待编译的源程序.</p>
<p>\(OnPE_2[int, source]\) 的时候, \(int\) 是subejct program, \(int\) 中被绑定到 \(source\) 程序片段的名字, 在环境中映射到 <code>InVal</code>,
绑定到 \(input\) 的名字在 <code>On-Env</code> 中映射到 <code>InExp</code> 中. 所以 \(OnPE_2\) 的行为通俗来讲是这样的:</p>
<ol>
<li>拿到一个待 PE 的 subject program \(int\);</li>
<li>拿到一个subject program的Environment, 在这个Enviroment中,
告诉了 \(OnPE_2\) subject program \(int\) 中哪些变量绑定到 <code>InVal</code> (<code>source</code> 关联的变量),
哪些变量绑定到 <code>InExp</code> (<code>input</code> 关联的变量).</li>
<li>开始递归遍历 subject program \(int\), 返回residual program, 在这个过程中:
如果看到 \(int\) 中的name, 需要去 Environment 中查看这个 name 是 <code>InVal</code> 还是 <code>InExp</code>.</li>
</ol>
<p>在 \(OnPE_1[OnPE_2, int]\) 的时候, \(OnPE_1\) 的&quot;眼中&quot;:</p>
<ol>
<li>\(OnPE_2\) 是一个一般的程序, \(int\) 是这个程序已知的输入;</li>
<li>\(OnPE_2\) 的另一个输入 Environment 是未知的,
所以对于 \(OnPE_2\) 中依赖于 Environment 的计算在specialize的过程中都会保留,
比如说 <code>lookup [name]</code> 这一操作, 即使 \(OnPE_2[int, source]\) 的时候 <code>lookup[name]</code> 一定返回一个 <code>InVal</code>,
\(OnPE_1\) 也不知道这一点, 它只知道 \(OnPE_2\) 往一个既有 <code>InVal</code> 又有 <code>InExp</code> 的Environment中lookup了,
所以lookup的返回值有可能是 <code>InVal</code> 或 <code>InExp</code> 两种, 所以对这个返回值的分支判断当然要保留.</li>
</ol>
<p>Offline Partial Evaluator 在 self-application 上的优势正是通过消除 Online Partial Evaluator 的一般性获得的:
Offline PE 会首先通过 <a href="/blog/articles/partial-evaluation-for-flow-chart/#division">Binding Time Analysis</a> 得到一个 annotated interpreter: \(int^{ann}\).</p>
<p>首先分析一下 \(OffPE_2[int^{ann}, source]\) 的计算过程:
\(OffPE_2\) 在判断 \(int^{ann}\) 中的表达式应该是 static 还是 dynamic 不需要管另一个输入 \(source\),
因为一切都在 \(int^{ann}\) 中标定好了.</p>
<p>然后就可以在已知 \(int^{ann}\) 的输入下, 对 \(OffPE_2\) 进行标定了:
\(OffPE_2\) 中的表达式, 如果在只依赖于 \(int^{ann}\) 那么就可以标定为 static ,
标定后的 \(OffPE_2\) 可以称之为 \(OffPE^{ann}\).</p>
<p>再来分析 \(OffPE_1 [OffPE^{ann}, int^{ann}]\) :
\(OffPE^{ann}\) 中保留了 \(OffPE_2[int^{ann}, source]\) 时候的信息: 如果已知 \(int^{ann}\) 输入,
\(OffPE_2\) 中&quot;哪些表达式是 static&quot;.
从而 \(OffPE_1\) 可以利用这些信息决定 \(OffPE^{ann}\) 要 specialize 成什么样.</p>
<p>由于 \(int^{ann}\) 已经标注了&quot;等source来了要如何使用&quot;了,
\(OffPE^{ann}\) 也会利用这些annotation做specialize
(标注了static的就代表environment中能找到Value或者能由environemnt中的Value计算出来, 标注了dynamic的就代表environemnt中有Expression或者保持原样), 也就是说 \(OffPE^{ann}\) 不需要知道source是什么也能做specialize.
这个行为继承到生成的compiler中表现为生成的compiler不需要再对Enrionment中取得的值做分支判断,
这个判断已经被 \(int^{ann}\) 标注好了.</p>
<p>为什么说失去了通用性呢? 因 为相比于 OnPE, OffPE 还限制了 self-application 所生成的 compiler 的输入:
哪些东西是 static, 哪些东西是 dynamic 需要与 \(int^{ann}\) 中的 annotation 保持一致.</p>
<p>具体来说, 在 <code>OffPE(int, source)</code> 的 Off-Env 中:
待编译的源程序片段是 static 的输入, 只能作为 Value 绑定到静态变量; 而源程序输入是 dynamic 的, 只能作为 Expression 绑定到动态变量.</p>
<h2 id="related">Related</h2>
<p><a href="/blog/articles/partial-evaluation/">Partial Evaluation</a></p>
<h2 id="references">References</h2>
<style>.csl-left-margin{float: left; padding-right: 0em;}
 .csl-right-inline{margin: 0 0 0 1em;}</style><div class="csl-bib-body">
  <div class="csl-entry"><a id="citeproc_bib_item_1"></a>
    <div class="csl-left-margin">[1]</div><div class="csl-right-inline">N. D. Jones, C. K. Gomard, and P. Sestoft, <i>Partial Evaluation and Automatic Program Generation</i>. USA: Prentice-Hall, Inc., 1993.</div>
  </div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Local Type Inference</title>
      <link>http://localhost:1313/blog/articles/20230901095515-local_type_inference/</link>
      <pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate><author>azhong.934@gmail.com (butterunderflow)</author>
      <guid>http://localhost:1313/blog/articles/20230901095515-local_type_inference/</guid>
      <description>&lt;h2 id=&#34;ml语言的背后&#34;&gt;ML语言的背后&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;众所周知&lt;/strong&gt;, ML系语言十分强大, 这不仅仅得益于它们丰富的语义(高阶函数, local binding, lambda), 还得益于这套语义背后强大的类型系统.
ML语言的类型系统通常支持十分强大类型推导功能, 强大到什么程度呢?
理论上开发者可以忽略所有类型签名, type checker仍然可以推导出所有的类型签名.&lt;/p&gt;
&lt;h3 id=&#34;类型推导的两个-端点&#34;&gt;类型推导的两个&amp;quot;端点&amp;quot;&lt;/h3&gt;
&lt;p&gt;但是, 如此强大的类型推导技术居然也不小心带来了一些负面影响:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;重要的类型签名被忽略. 很多情况下, 类型签名并不是开发者的负担而是起到了 &amp;ldquo;verified document&amp;rdquo; 的作用, 对可读性有着关键的影响.&lt;/li&gt;
&lt;li&gt;类型系统的复杂度增加(主要是类型推导部分).
直观来看这点是在语言实现上的负面影响,
但是过于复杂的类型推导除了会提升类型检查的复杂度也会带来编程的&amp;quot;负担&amp;quot;.
比如说开发者如果不能明确知道哪些类型能推导哪些类型不能推导,
那么考虑&amp;quot;要不要加上类型签名&amp;quot;的这个问题就会给程序员带来心智负担.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于这些负面的影响, 最极端的做法就是我们要求把所有的类型都加上, 直接抛弃类型推导功能.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你不是说我推导不好吗, 那你自己写上吧.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;但是这又带来了新的问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为所有类型写上类型签名实在是太啰嗦了, 维护一个冗长但是又没有意义的类型签名,
反而会带来编程时的心智负担.&lt;/li&gt;
&lt;li&gt;很多类型签名实际上是&amp;quot;噪音&amp;quot;. 如果完全抛弃类型推导,
那么在一个程序中, 有可能类型签名比描述程序执行信息的核心部分还要多,
这样的类型噪音甚至反而会影响程序的可读性.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;尝试找到类型推导平衡点&#34;&gt;尝试找到类型推导平衡点&lt;/h3&gt;
&lt;p&gt;那么有没有一种办法设计一个类型系统,
可以在描述ML丰富的语义的同时引入&amp;quot;适量&amp;quot;的类型推导:
当显式写出类型签名的对开发者有益的时候不推导这个类型,
只选择推导&amp;quot;显式写出时无意义&amp;quot;的类型签名.&lt;/p&gt;
&lt;p&gt;局部类型推导(Local-Type inference)技术就诞生了&lt;/p&gt;
&lt;p&gt;作者总结了3种ML编程中常见的类型推导, 并通过局部类型推导技术完成这三种类型推导:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数调用时类型参数的推导是必要的&lt;/li&gt;
&lt;li&gt;匿名函数的类型推导是需要的&lt;/li&gt;
&lt;li&gt;local binding的类型推导是需要的&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;局部类型推导--local-type-inference&#34;&gt;局部类型推导(Local-Type inference)&lt;/h2&gt;
&lt;p&gt;局部类型推导尝试在保持ML编程的前提下尽可能的减弱类型推导的能力以简化类型推导算法,
局部的含义是类型推导只用到了局部的语法树的类型信息.&lt;/p&gt;
&lt;p&gt;通过Local Type Argument Synthesis可以解决第一个问题, 通过双向类型检查(Bidirectional Type Checking)可以解决问题2, 3.&lt;/p&gt;
&lt;h3 id=&#34;语言定义&#34;&gt;语言定义&lt;/h3&gt;
&lt;p&gt;先介绍了一个用于展示的简单的语言, 是沿用的一个叫 &lt;em&gt;(Kernel F&lt;/em&gt;≤_) 的语言, 这个语言支持subtype, 参数化多态, 匿名函数, 局部绑定.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="ml语言的背后">ML语言的背后</h2>
<p><strong>众所周知</strong>, ML系语言十分强大, 这不仅仅得益于它们丰富的语义(高阶函数, local binding, lambda), 还得益于这套语义背后强大的类型系统.
ML语言的类型系统通常支持十分强大类型推导功能, 强大到什么程度呢?
理论上开发者可以忽略所有类型签名, type checker仍然可以推导出所有的类型签名.</p>
<h3 id="类型推导的两个-端点">类型推导的两个&quot;端点&quot;</h3>
<p>但是, 如此强大的类型推导技术居然也不小心带来了一些负面影响:</p>
<ol>
<li>重要的类型签名被忽略. 很多情况下, 类型签名并不是开发者的负担而是起到了 &ldquo;verified document&rdquo; 的作用, 对可读性有着关键的影响.</li>
<li>类型系统的复杂度增加(主要是类型推导部分).
直观来看这点是在语言实现上的负面影响,
但是过于复杂的类型推导除了会提升类型检查的复杂度也会带来编程的&quot;负担&quot;.
比如说开发者如果不能明确知道哪些类型能推导哪些类型不能推导,
那么考虑&quot;要不要加上类型签名&quot;的这个问题就会给程序员带来心智负担.</li>
</ol>
<p>对于这些负面的影响, 最极端的做法就是我们要求把所有的类型都加上, 直接抛弃类型推导功能.</p>
<blockquote>
<p>你不是说我推导不好吗, 那你自己写上吧.</p></blockquote>
<p>但是这又带来了新的问题:</p>
<ol>
<li>为所有类型写上类型签名实在是太啰嗦了, 维护一个冗长但是又没有意义的类型签名,
反而会带来编程时的心智负担.</li>
<li>很多类型签名实际上是&quot;噪音&quot;. 如果完全抛弃类型推导,
那么在一个程序中, 有可能类型签名比描述程序执行信息的核心部分还要多,
这样的类型噪音甚至反而会影响程序的可读性.</li>
</ol>
<h3 id="尝试找到类型推导平衡点">尝试找到类型推导平衡点</h3>
<p>那么有没有一种办法设计一个类型系统,
可以在描述ML丰富的语义的同时引入&quot;适量&quot;的类型推导:
当显式写出类型签名的对开发者有益的时候不推导这个类型,
只选择推导&quot;显式写出时无意义&quot;的类型签名.</p>
<p>局部类型推导(Local-Type inference)技术就诞生了</p>
<p>作者总结了3种ML编程中常见的类型推导, 并通过局部类型推导技术完成这三种类型推导:</p>
<ol>
<li>函数调用时类型参数的推导是必要的</li>
<li>匿名函数的类型推导是需要的</li>
<li>local binding的类型推导是需要的</li>
</ol>
<h2 id="局部类型推导--local-type-inference">局部类型推导(Local-Type inference)</h2>
<p>局部类型推导尝试在保持ML编程的前提下尽可能的减弱类型推导的能力以简化类型推导算法,
局部的含义是类型推导只用到了局部的语法树的类型信息.</p>
<p>通过Local Type Argument Synthesis可以解决第一个问题, 通过双向类型检查(Bidirectional Type Checking)可以解决问题2, 3.</p>
<h3 id="语言定义">语言定义</h3>
<p>先介绍了一个用于展示的简单的语言, 是沿用的一个叫 <em>(Kernel F</em>≤_) 的语言, 这个语言支持subtype, 参数化多态, 匿名函数, 局部绑定.</p>
<p>我觉得很有意思的一点是, 文中把同一个语言区分了两层: 分别是内部语言(internal language)和外部语言(external langauge).
内部语言是full typed language, 外部语言是程序员日常接触的语言是可以省略一些类型签名的.
而类型推导的过程就是把外部语言翻译成内部语言的过程. 这个隔离可以让&quot;推导了什么东西&quot;很清楚的展现.</p>
<figure>
    <img loading="lazy" src="/ox-hugo/2023-09-17_23-30-15_screenshot.png"
         alt="Figure 1: 内部语言的定义: 类型表达式, 表达式, 类型环境"/> <figcaption>
            <p><span class="figure-number">Figure 1: </span>内部语言的定义: 类型表达式, 表达式, 类型环境</p>
        </figcaption>
</figure>

<p>Bottom Type的引入可以让任意两个类型都有最大下界, 可以让类型推导总有解.</p>
<figure>
    <img loading="lazy" src="/ox-hugo/2023-09-17_23-35-40_screenshot.png"
         alt="Figure 2: 子类型规则"/> <figcaption>
            <p><span class="figure-number">Figure 2: </span>子类型规则</p>
        </figcaption>
</figure>

<p>需要注意这里是有forall类型的子类型关系的, 之后理解约束生成/求解规则需要用到.</p>
<ul>
<li>note: 参数类型也可以有forall, 那是不是说local type inference并没有rank-2 type的限制呢?</li>
</ul>
<h3 id="local-type-argument-synthesis">Local Type Argument Synthesis</h3>
<figure>
    <img loading="lazy" src="/ox-hugo/2023-09-18_00-04-58_screenshot.png"
         alt="Figure 3: Declarative Rule"/> <figcaption>
            <p><span class="figure-number">Figure 3: </span>Declarative Rule</p>
        </figcaption>
</figure>

<p>这条规则的有2个要点: <br /></p>
<ol>
<li>如果调用目标的类型是 \( All(X)T \rightarrow R \), 并且调用的时候没有显式的给出类型参数, 那么需要通过推导 <strong>类型实参</strong>;</li>
<li>类型实参需要满足: 应用该类型实参后可以得到最小的函数返回类型.</li>
</ol>
<p>但是这条规则是声明式的, 为了能够得到一个可用的类型推导算法,
我们还要知道如何得到这个&quot;可以让返回值最小的类型实参&quot;.</p>
<p>于是就有了算法式规则.</p>
<figure>
    <img loading="lazy" src="/ox-hugo/2023-09-18_00-03-51_screenshot.png"
         alt="Figure 4: Algorithmic Rule"/> <figcaption>
            <p><span class="figure-number">Figure 4: </span>Algorithmic Rule</p>
        </figcaption>
</figure>

<p>该规则的算法含义是: 当需要infer \(f(\bar e)\) 的类型时, 我们需要做以下几件事情:</p>
<ol>
<li>先infer \(f\) 的类型;</li>
<li>infer 函数调用参数 \(e\) 的类型 \(\bar S\) ;</li>
<li>如果 \(f\) 的类型是一个需要类型参数的函数(即 \(|X| &gt; 0\)), 那么就需要类型推导推导出函数的类型参数;</li>
<li>把空集 \(\emptyset\), 类型 \(\bar S\), 形参类型 \(\bar S\),
类型形参 \(\bar X\), 喂给由关系 \(\vdash  \Rightarrow\) 定义的函数, 从而生成类型变量 \(\bar X\) 上的约束集合 \(\bar D\) ;</li>
<li>通过运算符 \(\wedge\) 合并 \(\bar D\) 得到 \(\bar C\) ;</li>
<li>求解约束 \(\bar C\) 得到能够让 \(R\) 最小的 unifier \(\sigma\)</li>
<li>将 \(\sigma\) 再apply到 \(\bar X\), 返回在internal term中填补空缺的类型实参.</li>
</ol>
<p>可以看到, 相比与声明式规则, 算法式规则中多了 \(C\) 和 \(\sigma\) .
其中 \(C\) 是在检查函数调用表达式时收集到的约束结合, \(\sigma\) 是对这些约束求解的结果.</p>
<ul>
<li>疑惑: 这里是不是有遗漏? 应该要像声明式规则一样把 <code>f</code> 翻译成 <code>f'</code> 的过程.</li>
</ul>
<p>很清晰对吧!</p>
<h4 id="约束生成">约束生成</h4>
<p>约束生成规则关系 \(V \vdash_{\bar X} S &lt;: T \Rightarrow D \), 描述了对于包含类型变量\(\bar X\)的子类型关系 \(S &lt;: T\)
和可以替换成任意类型的类型变量集合\(V\), 需要生成的关于 \(\bar X\) 类型约束集合 \(D\).
对于任意的 \(V\) 的替换都能满足  \(S &lt;: T\), 当且仅当 \(\bar X\) 满足类型约束 \(D\).</p>
<p>为什么要有一个 \(V\) 呢? 因为文章中用于展示的语言的类型并没有rank-2的限制,
当我们尝试为一个子类型关系生成约束时, 类型中有的变量是free的(我们需要生成约束的变量),
有的变量是被 \(ALL\) capture 的.
而对于这些captrured变量, 我们不知道关于它们的任何信息,
所以需要按照这个目标来生成free变量约束:
对于所有被capture的变量的替换, 子类型关系都能成立.</p>
<figure>
    <img loading="lazy" src="/ox-hugo/2023-09-30_14-34-25_screenshot.png"
         alt="Figure 5: 约束生成的关系"/> <figcaption>
            <p><span class="figure-number">Figure 5: </span>约束生成的关系</p>
        </figcaption>
</figure>

<p>这个关系中用到了两个辅助的关系 \(\Uparrow\) 和 \(\Downarrow\), 叫做 Variable Elimination. 这两个关系就不复杂了, 而且是完全对称的.</p>
<figure>
    <img loading="lazy" src="/ox-hugo/2023-09-30_15-27-55_screenshot.png"
         alt="Figure 6: Variable Elimination关系"/> <figcaption>
            <p><span class="figure-number">Figure 6: </span>Variable Elimination关系</p>
        </figcaption>
</figure>

<p>\(S \Uparrow^V T\) 表示对于类型 \(S\), \(T\) 是满足以下条件的最小上界类型: \(T\) 大于\(S&rsquo;\), \(S&rsquo;\)为任意把 \(S\) 中的 \(V\) 替换为任意类型后得到的类型.</p>
<p>原文中的描述更加简单, 就说要eliminate掉这些变量.</p>
<blockquote>
<p>In the constraint generation algorithm that we present in the next section, it will
sometimes be necessary to eliminate all occurrences of a certain set of variables
from a given type by promoting (or demoting) the type until we reach a supertype
(or subtype) in which these variables do not occur.</p></blockquote>
<h4 id="约束求解">约束求解</h4>
<p>约束生成将为\(\bar X\)中的每个变量生成一个上限和下限, 约束求解将给每个\(X\)一个具体的类型,
具体来说就是取能让返回类型最小的边界条件.</p>
<p>类型变量\(X\)在类型\(T\)中出现的位置可以分为4类covariant, invariant, contravariant和constant. 个人通俗的解释是:</p>
<ol>
<li>Covariant: 表示类型X增长, 类型T也会随之增长(如\(T = (&hellip;) \rightarrow X\));</li>
<li>Contravariant: 表示类型X增长, 类型T也法内容会随之下降 (如\(T = (&hellip; X &hellip;) \rightarrow &hellip;\));</li>
<li>Invariant: X发生变化为X&rsquo;后, 只要X与X&rsquo;不同, T&rsquo;与之前的T是不存在子类型关系的;</li>
<li>Constant: X随便替换成什么, 替换后的类型均有子类型关系.</li>
</ol>
<p>严谨的定义如下:</p>
<figure>
    <img loading="lazy" src="/ox-hugo/2023-09-30_18-22-44_screenshot.png"
         alt="Figure 7: covariant, invariant, contravariant和constant"/> <figcaption>
            <p><span class="figure-number">Figure 7: </span>covariant, invariant, contravariant和constant</p>
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/ox-hugo/2023-09-30_17-58-07_screenshot.png"
         alt="Figure 8: 约束求解"/> <figcaption>
            <p><span class="figure-number">Figure 8: </span>约束求解</p>
        </figcaption>
</figure>

<p>因为有subtype的存在, 这里的约束求解与let polymorphism中的unification稍微有些不同, unification基于 \(=\) 约束得到unifier,
此处基于 \(\le\) 约束和类型变量在返回类型中所处的位置得到unifier.</p>
<h3 id="双向类型检查--bidirectional-checking">双向类型检查(Bidirectional Checking)</h3>
<p>双向类型检查更像是一种类型检查的风格,
把类型检查分为了两个过程: check和infer.</p>
<p>check过程是: &ldquo;已经有一个term出现在了一个需要类型T的上下文中,
我们需要check这个term是否真的为类型T&rdquo;; <br />
infer过程是: &ldquo;对于一个term, 不知道这个term所在的上下文需要什么类型,
我们需要在上下文中infer这个term的类型&rdquo;.</p>
<p>这也是Bidirectional名称的由来: 我们既可以通过check把类型信息传递给子节点,
也可以通过infer把类型信息传递给父节点.</p>
<figure>
    <img loading="lazy" src="/ox-hugo/2023-09-30_18-53-12_screenshot.png"
         alt="Figure 9: Bidirectional Checking的规则"/> <figcaption>
            <p><span class="figure-number">Figure 9: </span>Bidirectional Checking的规则</p>
        </figcaption>
</figure>

<p>从规则中可以看到, 每一个term分别有两条规则, 一类是C开头的check,
另一类是S开头的Synthesis(就是Infer).</p>
<p>比较复杂的是Application节点的check&amp;infer:</p>
<ol>
<li>只有在Application节点, check会调用infer推导调用目标的类型,
然后根据该类型再check调用参数的类型是否兼容, 并生成类型兼容需要满足的约束条件:
<ol>
<li>类型信息就是这样被带到了函数调用的实际参数;</li>
<li>类型实参也是在这个时候被上一节描述的算法被推导出来.</li>
</ol>
</li>
<li>Abstraction的check过程就是利用了1的类型信息以推导函数的参数类型.</li>
</ol>
<p>从规则中我们也能看到相比与let-polymorphism的不足, 在Abstraction的infer中,
我们必须写出类型参数, local-type-inference是不支持自动推导泛型参数的.</p>
<h4 id="bidirectional">Bidirectional?</h4>
<p>相比与原版的let polymorphism, 对于推导let binding type annotation的能力是要弱很多的,
虽然Bidirectional checking这个词是被local type inference提出的,
但是我觉得类型推导算法实际上都有类似 &ldquo;bidirectional&rdquo; 的过程.</p>
<p>类型推导还是一个收集约束然后求解约束的过程,</p>
<p>比如说在HM类型系统中, 我们需要不断的基于类型约束更新类型环境(环境如果关联了语法树上的类型信息的话,
那么语法树上的类型信息也会被更新).
这不也可以算是 <code>environment &lt;-&gt; term</code> 之间的bidirectional吗:
在environment中检查term; 在检查的过程中将收集到的约束&quot;反馈&quot;给environment.</p>
<p>HM type system在类型检查的过程中无时无刻不在基于新发现的约束更新环境;
而local type inference不会在类型检查过程中更新类型环境, 只允许利用局部的类型信息进行推导.</p>
<h2 id="现实世界的编程语言">现实世界的编程语言</h2>
<p>目前看到的编程语言, 要么采用像Haskell和OCaml这样的全局类型推导, 要么采用局部类型推导(Java, Scala), 并且都没有超过rank-2的限制(也就是说从理论上来说, local type inference还可以做更多).
然而局部类型推导是没有像let-polymorphism这样 <em>泛化(generalize)</em> 一个函数的能力的,</p>
<p>最近出的MoonBit采用了一种以前从来没见过的方案, 我觉得挺机智:</p>
<ol>
<li>模块级别的函数必须手动标注类型;</li>
<li>局部函数可以具有类似let-polymorphism的能力</li>
</ol>
<p>这样即可以限制类型推导的实际开销(只要\(O(n^2)\)的n足够小, 那就和常量差不多), 又具有let-polymorphism.</p>
]]></content:encoded>
    </item>
    <item>
      <title>讨论主题的重要性</title>
      <link>http://localhost:1313/blog/articles/20230825121425-disscuss-on-mainline/</link>
      <pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate><author>azhong.934@gmail.com (butterunderflow)</author>
      <guid>http://localhost:1313/blog/articles/20230825121425-disscuss-on-mainline/</guid>
      <description>&lt;p&gt;最近经常和各类人高强度的讨论各种事情,
我在读研期间和经常需要线上/线下和我的导师讨论各种问题,
但是我也没有感受到像最近这样的疲惫感.&lt;/p&gt;
&lt;p&gt;我总结了一下, 主要原因还是在于讨论的时候没有确立讨论主题问题,
比如说对于一个问题X的解决方案的讨论, x提出了A解决方法,
y指出了A解决方法中存在的问题P.
在听到了这些问题后, 如果x认为应该继续采用A方法,
正常的做法首先应该是论证P的影响, 比如说:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;P到底是否存在?&lt;/li&gt;
&lt;li&gt;P的影响有多大? 给问题X的解决造成了多大程度的负面影响?&lt;/li&gt;
&lt;li&gt;P是否是为了解决某个问题而必然引入的新问题?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果P确实是一个不可忽视的问题, 然后应该讨论解决方法A的的&amp;quot;补救&amp;quot;措施:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;能否修改方案A以弥补问题P?&lt;/li&gt;
&lt;li&gt;是否需要重新设计方案B以同时解决问题X和问题P?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果沟通不是按照这个步骤结构化的进行, 那么必然产生心智负担.
实际沟通中常常会有如下几种情况:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果y提出问题P后, x通过与问题本身无关的方式否认这个问题,
比如说解决问题P不会成为我们的优势, 解决问题P也不会让别人更想用我们的产品.
这种情况相当于直接回避问题. 如果y是个负责的人,
必然会想方设法的说服x问题P的存在性. 另一方面这也会让y感觉到疲惫,
因为&amp;quot;问题P是否存在&amp;quot;和&amp;quot;解决问题P是否会成为优势&amp;quot;是两个十分不相同的事情,
所用到的知识也很有可能属于完全不同的领域, 而y在讨论前可能并没有准备好另一部分的知识.&lt;/li&gt;
&lt;li&gt;如果x确认问题P的存在后, 但是并不直面这个问题P, 而是说谁谁的a,b,c方案是用类似于A方案这么解决的, 根本没事.
这就给y带来了心智负担: 如果y没有了解过a,b,c方案, 他还需要再去确认这些方案是否真的是如x所说,
如果不如x所说又要和x对这些a,b,c方案的做法进行对齐.
如果想用别人的方案来说明, 正常的做法应当是x首先尽量详细介绍一下a,b,c方案, 说服y这些方案确实是为了x而存在, 且真的与解法A存在同构.&lt;/li&gt;
&lt;li&gt;最后一种情况, 也是最折磨人的情况: 那你搞一个方案解决问题X吧, 我只能想到这种解法.
工作中的分工是明确的, 此时如果y是个对产品负责的人, 必然会在自己的工作量基础上增加额外的工作量.&lt;/li&gt;
&lt;/ol&gt;</description>
      <content:encoded><![CDATA[<p>最近经常和各类人高强度的讨论各种事情,
我在读研期间和经常需要线上/线下和我的导师讨论各种问题,
但是我也没有感受到像最近这样的疲惫感.</p>
<p>我总结了一下, 主要原因还是在于讨论的时候没有确立讨论主题问题,
比如说对于一个问题X的解决方案的讨论, x提出了A解决方法,
y指出了A解决方法中存在的问题P.
在听到了这些问题后, 如果x认为应该继续采用A方法,
正常的做法首先应该是论证P的影响, 比如说:</p>
<ol>
<li>P到底是否存在?</li>
<li>P的影响有多大? 给问题X的解决造成了多大程度的负面影响?</li>
<li>P是否是为了解决某个问题而必然引入的新问题?</li>
</ol>
<p>如果P确实是一个不可忽视的问题, 然后应该讨论解决方法A的的&quot;补救&quot;措施:</p>
<ol>
<li>能否修改方案A以弥补问题P?</li>
<li>是否需要重新设计方案B以同时解决问题X和问题P?</li>
</ol>
<p>如果沟通不是按照这个步骤结构化的进行, 那么必然产生心智负担.
实际沟通中常常会有如下几种情况:</p>
<ol>
<li>如果y提出问题P后, x通过与问题本身无关的方式否认这个问题,
比如说解决问题P不会成为我们的优势, 解决问题P也不会让别人更想用我们的产品.
这种情况相当于直接回避问题. 如果y是个负责的人,
必然会想方设法的说服x问题P的存在性. 另一方面这也会让y感觉到疲惫,
因为&quot;问题P是否存在&quot;和&quot;解决问题P是否会成为优势&quot;是两个十分不相同的事情,
所用到的知识也很有可能属于完全不同的领域, 而y在讨论前可能并没有准备好另一部分的知识.</li>
<li>如果x确认问题P的存在后, 但是并不直面这个问题P, 而是说谁谁的a,b,c方案是用类似于A方案这么解决的, 根本没事.
这就给y带来了心智负担: 如果y没有了解过a,b,c方案, 他还需要再去确认这些方案是否真的是如x所说,
如果不如x所说又要和x对这些a,b,c方案的做法进行对齐.
如果想用别人的方案来说明, 正常的做法应当是x首先尽量详细介绍一下a,b,c方案, 说服y这些方案确实是为了x而存在, 且真的与解法A存在同构.</li>
<li>最后一种情况, 也是最折磨人的情况: 那你搞一个方案解决问题X吧, 我只能想到这种解法.
工作中的分工是明确的, 此时如果y是个对产品负责的人, 必然会在自己的工作量基础上增加额外的工作量.</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Partial Evaluation for Functional Language</title>
      <link>http://localhost:1313/blog/articles/partial-evaluation-for-functional/</link>
      <pubDate>Wed, 30 Aug 2023 00:00:00 +0000</pubDate><author>azhong.934@gmail.com (butterunderflow)</author>
      <guid>http://localhost:1313/blog/articles/partial-evaluation-for-functional/</guid>
      <description>&lt;p&gt;&lt;em&gt;partial evaluation&lt;/em&gt; 的第五章 &lt;em&gt;Partial Evaluation for a First-Order Functional Language&lt;/em&gt; 的笔记.&lt;/p&gt;
&lt;p&gt;前一章通过对一个简单的 flow chart (基本块) 语言的 partial evaluation 介绍了许多 partial
evaluation 的概念技巧. 一个partial evaluation算法基本可以分为以下两步:&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确定源程序每个程序点可以静态确定的状态(Binding Time Analysis);&lt;/li&gt;
&lt;li&gt;依据这些静态状态, 把源程序的每个基本块&amp;quot;展开&amp;quot;到目标程序,
这些静态状态在目标程序中不再需要被计算, 而是直接&amp;quot;嵌入&amp;quot;到了目标程序中.
该目标程序被称之为&amp;quot;残差程序&amp;quot;(residual program).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么对于更加复杂的语言应该如何做partial evaluation呢?&lt;/p&gt;
&lt;p&gt;这一章的介绍了一门比flow chart稍微强大(同时也复杂)一点的语言, 叫做Scheme0,
并展示了如何对这个语言进行partial evaluation.
Scheme0仍然是采用lisp的语法, 支持全局的函数定义,
不支持高阶函数(将函数绑定至临时变量/将函数作为参数传递/将函数作为返回值), 没有副作用.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/blog/ox-hugo/Pasted-image-20221127220632.png&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;从flow-chart到scheme0&#34;&gt;从flow chart到Scheme0&lt;/h2&gt;
&lt;p&gt;在对Scheme0进行partial evaluation的过程中,
有哪些概念/技巧/思想是可以从flow chart语言的partial evaluation中复用的呢? 我们需不需要对一个新的语言从头设计partial evaluation算法呢?&lt;/p&gt;
&lt;p&gt;所幸, 绝大部分都是相似且可以复用的, 下表展示了这些可以直接对应起来的概念.
还有一些其他partial evaluation中的概念Scheme0和Flow Chart是完全没有变化的.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Flow Chart&lt;/th&gt;
          &lt;th&gt;Scheme0&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Program point&lt;/td&gt;
          &lt;td&gt;Function&amp;rsquo;s entry&lt;/td&gt;
          &lt;td&gt;Flow Chart的program point直接对应函数的入口, 是specialize过程中始终保留的东西&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Global Variable&lt;/td&gt;
          &lt;td&gt;Parameter&lt;/td&gt;
          &lt;td&gt;Global Variable对应函数的Parameter, 也只有这里的静态值会&amp;quot;嵌入&amp;quot;至residual program&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Transition Compression&lt;/td&gt;
          &lt;td&gt;Function&amp;rsquo;s Unfolding&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;binding-time-analysis&#34;&gt;Binding Time Analysis&lt;/h2&gt;
&lt;h3 id=&#34;通过抽象解释进行bta&#34;&gt;通过抽象解释进行BTA&lt;/h3&gt;
&lt;p&gt;采用抽象解释的方式分析binding time, 此时抽象域为 &lt;code&gt;参数 -&amp;gt; binding time&lt;/code&gt; 的partial mapping,
称之为 &lt;strong&gt;Binding Time Environment(BTEnv)&lt;/strong&gt;.
而binding time的序也十分简单, 就是 \(D \ge S\).&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><em>partial evaluation</em> 的第五章 <em>Partial Evaluation for a First-Order Functional Language</em> 的笔记.</p>
<p>前一章通过对一个简单的 flow chart (基本块) 语言的 partial evaluation 介绍了许多 partial
evaluation 的概念技巧. 一个partial evaluation算法基本可以分为以下两步:<br /></p>
<ol>
<li>确定源程序每个程序点可以静态确定的状态(Binding Time Analysis);</li>
<li>依据这些静态状态, 把源程序的每个基本块&quot;展开&quot;到目标程序,
这些静态状态在目标程序中不再需要被计算, 而是直接&quot;嵌入&quot;到了目标程序中.
该目标程序被称之为&quot;残差程序&quot;(residual program).</li>
</ol>
<p>那么对于更加复杂的语言应该如何做partial evaluation呢?</p>
<p>这一章的介绍了一门比flow chart稍微强大(同时也复杂)一点的语言, 叫做Scheme0,
并展示了如何对这个语言进行partial evaluation.
Scheme0仍然是采用lisp的语法, 支持全局的函数定义,
不支持高阶函数(将函数绑定至临时变量/将函数作为参数传递/将函数作为返回值), 没有副作用.</p>
<figure>
    <img loading="lazy" src="/ox-hugo/Pasted-image-20221127220632.png"/> 
</figure>

<h2 id="从flow-chart到scheme0">从flow chart到Scheme0</h2>
<p>在对Scheme0进行partial evaluation的过程中,
有哪些概念/技巧/思想是可以从flow chart语言的partial evaluation中复用的呢? 我们需不需要对一个新的语言从头设计partial evaluation算法呢?</p>
<p>所幸, 绝大部分都是相似且可以复用的, 下表展示了这些可以直接对应起来的概念.
还有一些其他partial evaluation中的概念Scheme0和Flow Chart是完全没有变化的.</p>
<table>
  <thead>
      <tr>
          <th>Flow Chart</th>
          <th>Scheme0</th>
          <th>解释</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Program point</td>
          <td>Function&rsquo;s entry</td>
          <td>Flow Chart的program point直接对应函数的入口, 是specialize过程中始终保留的东西</td>
      </tr>
      <tr>
          <td>Global Variable</td>
          <td>Parameter</td>
          <td>Global Variable对应函数的Parameter, 也只有这里的静态值会&quot;嵌入&quot;至residual program</td>
      </tr>
      <tr>
          <td>Transition Compression</td>
          <td>Function&rsquo;s Unfolding</td>
          <td>-</td>
      </tr>
  </tbody>
</table>
<h2 id="binding-time-analysis">Binding Time Analysis</h2>
<h3 id="通过抽象解释进行bta">通过抽象解释进行BTA</h3>
<p>采用抽象解释的方式分析binding time, 此时抽象域为 <code>参数 -&gt; binding time</code> 的partial mapping,
称之为 <strong>Binding Time Environment(BTEnv)</strong>.
而binding time的序也十分简单, 就是 \(D \ge S\).</p>
<p>对于BTA的抽象解释, 分为了两种transfer function, 两种transfer function具有不同的含义:</p>
<ol>
<li>如何使用BTEnv: 在一个BTEnv中, 如何根据子表达式的binding time得到该表达式的binding bime</li>
<li>如何更新BTEnv: 对于在binding time environment t中求值的表达式e, 对于某个函数g的调用,
这个g的实参的binding time至少为多少.</li>
</ol>
<figure>
    <img loading="lazy" src="/ox-hugo/2023-09-17_17-02-59_screenshot.png"/> 
</figure>

<figure>
    <img loading="lazy" src="/ox-hugo/2023-09-17_17-32-37_screenshot.png"/> 
</figure>

<p>从Bottom出发(也就是把所有的参数都初始化为Static)不断的应用上面第二个transfer
function更新每个函数参数的BTEnv, 直到无法更新任何函数的BTEnv,
此时称抽象解释达到了不动点(fixpoint).</p>
<h3 id="通过binding-time-annotation提高specialization算法的效率">通过Binding Time Annotation提高Specialization算法的效率</h3>
<p>先前的Binding Time都是通过一种叫binding time envionment来表示的,
这种表示在概念上很简洁, 但是因为在使用在实际运用binding time做specialization的时候是很低效的,
因为要不断的查表来看某个变量是否是static的.</p>
<p>一种提高效率的技巧是先通过binding time做一次程序变换,
变换过程中为程序的每个节点加上binding time annotation来描述BTA的分析结果,
这样在specialization 的过程中就只要看这个annotation就可以了.</p>
<p>如下图所示, 每个表达式都有一个 <code>s</code> 或 <code>d</code> 来表示这个表达式是static还是dynamic的,
函数的参数列表也被拆分成了static和dynamic参数两部分. <code>lift</code> 表示dynamic表达式中的static部分.</p>
<figure>
    <img loading="lazy" src="/ox-hugo/2023-09-17_17-47-13_screenshot.png"/> 
</figure>

<figure>
    <img loading="lazy" src="/ox-hugo/2023-09-17_17-47-46_screenshot.png"/> 
</figure>

<h3 id="通过类型系统对bta进行soundness-check">通过类型系统对BTA进行soundness check</h3>
<p>可以把Binding Time Annotation看作是一种类型签名,
然后通过类型系统检查程序Binding Time Annotation的soundness, 类型检查规则如下:</p>
<figure>
    <img loading="lazy" src="/ox-hugo/2023-09-17_20-08-03_screenshot.png"/> 
</figure>

<p>注意, 这里只能 <strong>检查(check)</strong> 一个BTA是否sound,
而不能 <strong>推导(infer)</strong> 出一个程序的BTA,
因为上述规则没有 <strong>为没有Binding Time Annotation的程序生成Binding Time Annotation</strong> 的能力,</p>
<h2 id="specialization算法">Specialization算法</h2>
<figure>
    <img loading="lazy" src="/ox-hugo/2023-09-17_17-54-03_screenshot.png"/> 
</figure>

<figure>
    <img loading="lazy" src="/ox-hugo/2023-09-17_18-17-50_screenshot.png"/> 
</figure>

<p>这里和之前的flow chart是十分相似的, 由于有函数的存在, 我觉得算法的表达反而更简洁了,
直接看算法还是可以理解的, 由三个函数组成:</p>
<ol>
<li>一个主调函数specialize, 包含输入程序 <code>program</code> 和表示了入口函数的static参数的值 <code>vs_0</code> .</li>
<li>一个 <strong>很像</strong> 尾递归的函数 <code>complete</code> :
<ol>
<li>complete将返回对 <code>pending</code> 中的specialized function entry进行specialization的结果;</li>
<li><code>marked</code> 包含已经specialized program point</li>
<li><code>program</code> 表示源程序, 这个参数不会改变</li>
</ol>
</li>
<li>一个基于静态值对表达式进行程序变换的函数 <code>reduce</code> ,
<code>reduce</code> 的内容很多但并其实不是特别复杂, 有一点需要注意的是,
目前 <code>calls</code> 只会unfold dynamic parameter list为空的函数.
而 unfold strategy 其实可以很多样.</li>
</ol>
<!--listend-->
<ul>
<li>注意: BTA只区分参数是static还是dynamic,
而具体的static value的值只有在reduce函数中才会被求出.</li>
</ul>
<h2 id="static-bound-variation--the-trick">Static Bound Variation(The Trick)</h2>
<p>在对Scheme0进行partial evaluation的过程中也会遇到Static Bound Variation的问题:</p>
<blockquote>
<p>当一个值是依赖于动态值, 但是其取值范围是静态的, 应该如何利用这样的静态信息.</p></blockquote>
<p>解法也是相似的(The Trick), 对包含Static Bound Variation的程序进行一次程序变换,
对取值范围中的每一个值进行一次分支判定, 从而该Static Bound Variation就可以看作Static的,
增加了可specialize的内容.</p>
<p>Static Bound Variation是高质量的self-application的关键,
因为如果不这么做的话会丢失掉很多specialize的机会,
从而让self-application生成的程序生成十分trivial的residual program(即使从语义上来说是正确的).</p>
<p>在对scheme0进行PE的过程中, 因为我们选取的specialation单元是一个函数,
因此如果不想大改现有的算法的话, 需要对程序进行一些变换才能使用the trick.</p>
<figure>
    <img loading="lazy" src="/ox-hugo/2023-09-17_19-13-00_screenshot.png"/> 
</figure>

<ul>
<li>这是不是就是这个 <a href="https://www.zhihu.com/answer/371277506">知乎回答</a> 中提到的 <strong>partial evaluation friendly</strong> 的意思?</li>
</ul>
<h2 id="function-unfolding-strategy">Function Unfolding Strategy</h2>
<p>unfold 可以消除一些函数定义让residual program变得更简洁,
比如说下面的两种函数显然可以被unfold:</p>
<ol>
<li>一个函数什么也没做, 只是调用另一个函数;</li>
<li>一个函数只被调用过一次.</li>
</ol>
<p>之前提到的unfolding strategy只有在 <code>calls</code> 的目标没有动态参数的时候会进行unfold,
然而unfold strategy的其实可以是比较复杂的.
unfold strategy的最终目的还是为了提升residual程序的质量(比如说消除trivial function).
而在这个过程中,
有可能因为unfold反而降低了程序质量(产生了program duplication或computation duplication),
又有各种各样的trick.
这里就不详细介绍每个strategy了, 只介绍一些通用的unfolding strategy的基本要求:</p>
<ol>
<li>实参的计算存在副作用, 则需要保证这些副作用的顺序&amp;次数在unfold后的程序中不变;</li>
<li>要保证unfold策略能够停机, 不会无限的unfold;</li>
<li>尽量避免unfold过程中的program duplication和computation duplication.</li>
</ol>
<h2 id="related-notes-resource">Related Notes/Resource</h2>
<p><a href="https://www.itu.dk/people/sestoft/pebook/">ND.Jones&rsquo;s book</a>: Partial Evaluation的教材</p>
<p><a href="/blog/articles/partial-evaluation/">Partial Evaluation</a>: Partial Evaluation的基本概念</p>
<p><a href="/blog/articles/partial-evaluation-for-flow-chart/">Partial Evaluation For Flow Chart Langauge</a>: Flow chart语言的Partial Evaluation</p>
<p><a href="/404">Abstract Interpretation</a>: 抽象解释</p>
]]></content:encoded>
    </item>
    <item>
      <title>Partial Evaluation For Flow Chart Langauge</title>
      <link>http://localhost:1313/blog/articles/partial-evaluation-for-flow-chart/</link>
      <pubDate>Sat, 19 Nov 2022 00:00:00 +0000</pubDate><author>azhong.934@gmail.com (butterunderflow)</author>
      <guid>http://localhost:1313/blog/articles/partial-evaluation-for-flow-chart/</guid>
      <description>&lt;p&gt;&lt;em&gt;partial evaluation&lt;/em&gt; 的第四章 &lt;em&gt;Partial Evaluation for a Flow Chart
Language&lt;/em&gt; 的笔记.&lt;/p&gt;
&lt;p&gt;这一章介绍了一个叫做 &lt;em&gt;Flow Chart&lt;/em&gt; 的语言, 是一个以基本块组成的语言.
然后通过这个语言实现了两个二村映射来介绍&lt;a href=&#34;http://localhost:1313/blog/articles/partial-evaluation/&#34;&gt;Partial Evaluation&lt;/a&gt;的技巧.&lt;/p&gt;
&lt;h2 id=&#34;程序和状态&#34;&gt;程序和状态&lt;/h2&gt;
&lt;p&gt;然后就是程序点和程序状态的概念: 程序点就是程序执行的位置,
程序状态指的是程序执行的状态, 具体的状态的值域取决于语义的定义.
这一点和静态分析里的定义是类似的.&lt;/p&gt;
&lt;p&gt;程序的状态可能有很多, 但大部分的语言都可以通过 &lt;code&gt;变量 - 值&lt;/code&gt; 的映射来表示.
其中对于每个 program point, 变量的值可以分为 static 和 dynamic 分为两类.
static 表示变量的值可以在静态确定, 而 dynamic 的值只能在运行时确定.
将每个 program point 的变量区分为 static 和 dynamic 的过程叫做
&lt;em&gt;division&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;基于-static-程序状态做-partial-evaluation&#34;&gt;基于 static 程序状态做 partial evaluation&lt;/h2&gt;
&lt;p&gt;这就引出了一个概念叫做 &lt;em&gt;poly&lt;/em&gt;, 指的是基于输入和已知的程序点的 static
变量的值, 可以最大程度地确认多少程序点的 static 变量?
这个问题的求解结果可以通过一个由 &lt;code&gt;程序点-static value&lt;/code&gt; 序对组成的集合来表示 &lt;em&gt;poly&lt;/em&gt;.
这些 &lt;em&gt;poly&lt;/em&gt; 就对应着 residual program (specialized program) 的 program point.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><em>partial evaluation</em> 的第四章 <em>Partial Evaluation for a Flow Chart
Language</em> 的笔记.</p>
<p>这一章介绍了一个叫做 <em>Flow Chart</em> 的语言, 是一个以基本块组成的语言.
然后通过这个语言实现了两个二村映射来介绍<a href="/blog/articles/partial-evaluation/">Partial Evaluation</a>的技巧.</p>
<h2 id="程序和状态">程序和状态</h2>
<p>然后就是程序点和程序状态的概念: 程序点就是程序执行的位置,
程序状态指的是程序执行的状态, 具体的状态的值域取决于语义的定义.
这一点和静态分析里的定义是类似的.</p>
<p>程序的状态可能有很多, 但大部分的语言都可以通过 <code>变量 - 值</code> 的映射来表示.
其中对于每个 program point, 变量的值可以分为 static 和 dynamic 分为两类.
static 表示变量的值可以在静态确定, 而 dynamic 的值只能在运行时确定.
将每个 program point 的变量区分为 static 和 dynamic 的过程叫做
<em>division</em>.</p>
<h2 id="基于-static-程序状态做-partial-evaluation">基于 static 程序状态做 partial evaluation</h2>
<p>这就引出了一个概念叫做 <em>poly</em>, 指的是基于输入和已知的程序点的 static
变量的值, 可以最大程度地确认多少程序点的 static 变量?
这个问题的求解结果可以通过一个由 <code>程序点-static value</code> 序对组成的集合来表示 <em>poly</em>.
这些 <em>poly</em> 就对应着 residual program (specialized program) 的 program point.</p>
<p>一个直觉的描述是: 对于 subject program 在每个 program point, 把这个
program point 对应的 basic block 根据不同的 static state
&ldquo;展开&quot;的结果就是 residual program; &ldquo;展开&quot;之后, static 的属性就&quot;嵌入&quot;到
<em>residual program</em> 中, 成为 residual program 的一部分了,
而不再通过 subject program 的属性来表达.</p>
<h2 id="division">division</h2>
<p><em>division</em> 指的是在做 partial evaluation 之前, 先把程序变量做一个 Static 和 Dynamic 的区分,
因此这个过程也叫/Binding Time Analysis(BTA)/, 分析一个 value 的&quot;绑定时机&rdquo;.</p>
<p>BTA 有一个要点是要满足 <em>相合性(congruence)</em>,</p>
<p><em>division</em> 的结果并不一定是唯一的, 只要满足以下 congruence 条件就行:</p>
<blockquote>
<p>Any variable that depends on a dynamic variable must itself be dynamic.</p></blockquote>
<p>也就是标记为 Static 的变量不能依赖于 Dynamic 变量.</p>
<p>这个定义其实有一些抽象. 我们来设想一种场景, 对于一个循环中的变量,
第一次循环的值是确定的, 然后在循环中会通过赋值更新这个变量(这个 <em>Flow
Chart</em> 的语言是允许赋值的), 那么这个变量算是什么呢?</p>
<p>首先, 我们先看一下相合性本身的强大, 然后我们再来介绍一些更加高级的 division 方法</p>
<h3 id="static-变量可能比想象的多">Static 变量可能比想象的多</h3>
<p>一个变量标记为 Static 并不等于这个变量没有被修改过,
理论上满足相合性的 BTA 可以标记的 Static 变量可能比想象的多.</p>
<p>比如说一个循环的循环次数(假设为 <code>k</code> 次)和对变量更新的值都是可以 static 的,
那么把这个变量标记为 Static 是满足相合性的.</p>
<p>一个简单的验证办法是我们可以把这个循环展开 <code>k</code> 次, 展开后的程序的循环变量显然都是 static 的.</p>
<p>但是如果每次循环对变量更新的值仍然是 static 的,
但是循环的次数可能有无限多次, 这个变量我们应该标记为 static 吗?</p>
<p>对于这种情况, 我们将变量标记为 static 是满足相合性的:
因为给定任意的 k, 我们都能确定这个变量第 k 次循环的值.</p>
<p>但是, 如果把它们当作 Static 的, subject program 的 <em>poly</em> 将会是无限的,
从而导致根本无法有效的计算出一个 residual program (程序都是有限的). 所以,
从计算 residual program 的角度来说,
无限多种的 static variable 是没有意义的.</p>
<p>所以对于这种虽然标记为 Static 满足相合性, 但是会导致在 partial
evaluation 的过程中会得到无限多状态的变量, 我们只选择在 BTA 的过程中将他们标记为 Dynamic.</p>
<p>这样我们就得到了一种十分简单且对任何情况都适用的处理方式: <br />
所有麻烦的东西都当成 dynamic 就好了!</p>
<p>即使某些地方这个变量的值是已知的,
为了满足相合性, 我们直接直接将这个变量标记为 Dynamic 的,
这样虽然有一些静态信息我们没有利用, 但基于这样的 division 做 partial
evalutaion 仍然是安全且可用的.</p>
<p>但是从 partial evaluation 最基本的直觉出发, 我们标注为 dynamic 的东西越多,
我们能够 specialize 的东西就越少, partial evaluation 所能带来的优化也就更少.
所以, 我们的 <em>division</em> 应该在保证相合性和可计算性的前提下尽可能的让 dynamic 少.</p>
<p>那有没有什么通用的办法, 让我们给出 division 的同时, 还能保证这个
division 的 dynamic 是 <em>最少</em> 的?</p>
<p>很可惜, 这个问题是个 <em>不可判定</em> 问题.</p>
<p>不过书上说他们之后会给个办法给一个可接受的解(前面提到了, 合理的 division
并不唯一).</p>
<h3 id="更加高级的-division">更加高级的 division</h3>
<p>除了全程序共用一个 division, 也有很多更加高级的 division 方式, 这又根据其目的分了不同的情况, 有的是为了利用更多的静态信息, 有的是为了生成更高质量的 residual program.
不过基本思想都是把 division 进行&quot;参数化&rdquo;, 以表达更复杂的计算上下文中的 static value. (这点和程序分析中的上下文敏感很相似)</p>
<h4 id="point-wise-division">Point-wise Division</h4>
<p>除了全程序共用一个 division 的方法, 还可以点对点(Point-wise)的设置 division.
在这种 division 下, 每个程序点的 division 可以是不同的.</p>
<p>可以通过一个程序来说明 pointwise 的含义(书中的例子):</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">read(X, Y);
init: X := X + 1
      Y := Y - 1
cont: Y := 3
next: ...
</code></pre><p>如果程序的输入 <code>(X, Y)</code> 的 init division 是 <code>(S, D)</code>, 如果使用 uniform division(全程序共用一个 division)的话, 那么即使在 next 处 <code>Y</code> 的值明显是已知的, 也不能把他标记为 Static 的.</p>
<h4 id="polyvariant-division">Polyvariant Division</h4>
<p>Polyvariant 的 Division 指的是: 一个 division 不仅仅和程序点有关, 还和程序如何执行到这个程序点有关. 对于一个变量, 有的执行路径下把它标注为 Static, 有的路径标注为 Dynamic. 这种 division 就可以很灵活了, 此时, division 可以由一个 <code>flow -&gt; division</code> 的映射表示.</p>
<p>此时, 一个程序点可能对应多个 division(之前的 point-wise division 是每个点对应 <strong>1</strong> 个), 所以叫 <strong>poly</strong> variant division(每个程序点对应 1 个的叫 <strong>mono</strong> variant division)</p>
<p>疑问: 那可不可以再更加灵活一点呢? 比如说通过 <code>flow -&gt; state -&gt; division</code> 表示, state 是上一个程序点的状态.</p>
<h4 id="live-and-dead-division">Live and Dead Division</h4>
<p>目前的 division 只包含变量关于 Static 和 Dynamic 的划分.
但是有的时候, 这个变量在某个 program point 的值是 static 的,
但是这个变量在这个点没有被用到过(dead),
那我们可以在 residual program 的 program point 安全的抹去这些变量的值.</p>
<p>因此 Live and Dead Division 也可以看作是一种 pointwise division,
前述的 pointwise division 是每个 program point 的 static value 可以不同,
Live and Dead Division 是每个 program point 包含的 static value 也可以不同.</p>
<h2 id="transition-compression">Transition Compression</h2>
<p>路径压缩的目的是简化生成的 residual program 的质量, 消灭掉一些没有意义的跳转, 比如说生成的程序包含从一个基本块 <code>x := 1</code> 到基本块 <code>y := 1</code> 的跳转, 那么可以把这两个基本块直接合并成一个基本块. 其本身不会对生成程序的正确性和性能造成影响(这里的性能指的是抽象机中的性能, 真实的程序由于 cache locality, 跳转的数量和距离都会对性能有影响).</p>
<p>需要注意的是, Transition Compression 是有可能带来代码重复的. 比如说, 有两个基本块都跳转到统一个基本块, 但是我们把两个跳转都压缩了, 这就会带来代码重复. 需要谨慎的选择需要压缩的 transition 以避免代码爆炸的问题.</p>
<h2 id="mix-算法">Mix 算法</h2>
<p>Partial Evaluation 一般要做以下几件事情: <br /></p>
<ol>
<li>根据输入, 确定变量的 division; 也就是把变量区分为 static 和 dynamic 两类.
这一步有的是和计算 residual program 的过程是合在一起的(online) <br /></li>
<li>基于 division 计算 poly, 也就是 specialized program 的 program points.
前面提到了, poly 也有很多种不同的方式 <br /></li>
<li>根据 poly, 生成 specialized program<br /></li>
<li>(optional) transition compression<br /></li>
<li>(optional) relabel the program</li>
</ol>
<p>书中展示了一个完整的 mixer 程序, 做了上面的 5 件事情:</p>
<figure>
    <img loading="lazy" src="/ox-hugo/Pasted-image-20221121074932.png"/> 
</figure>

<p>虽然上面的所有事情这个 mix 程序都做了, 只是有一些操作是隐式的.
比如说 transition compression, 没有一个过程叫做&quot;transition compression&quot;,
当遇到 <code>goto l</code> 的时候, 直接把要插入的 basic block 更新成 <code>l</code> 对应的基本块就可以了.</p>
<h3 id="第一二村映射">第一二村映射</h3>
<p>如 <a href="/blog/articles/partial-evaluation/">Partial Evaluation</a> 中的描述, 第一二村映射指的是将一个 interpreter 在 interpreter 的输入程序上进行 specialize, 将会得到一个可执行程序.</p>
<p>一个解释器的完整定义如下:</p>
<figure>
    <img loading="lazy" src="/ox-hugo/Pasted-image-20221120195636.png"/> 
</figure>

<p>一个简单的程序可以被该解释器解释的程序:</p>
<figure>
    <img loading="lazy" src="/ox-hugo/Pasted-image-20221120194634.png"/> 
</figure>

<p>传入 mix 后, 将得到一个 specialized 的解释器</p>
<figure>
    <img loading="lazy" src="/ox-hugo/Pasted-image-20221120194652.png"/> 
</figure>

<p>Program point of target 和 (Program point, static variable) of interpreter 之间的对应关系:</p>
<figure>
    <img loading="lazy" src="/ox-hugo/Pasted-image-20221120195702.png"/> 
</figure>

<h3 id="第二二村映射">第二二村映射</h3>
<p>mix 程序可以把 <code>program</code> specialize 到 <code>program</code> 的静态可确定的程序状态 <code>vs_0</code>.
但是 mix 程序本身不也是程序吗? 它的输入是 <code>program</code>, <code>division</code> 和 <code>vs_0</code>.</p>
<p>那么 mix 可不可以把 <code>program</code> 参数 specialize 到某个程序呢?</p>
<p>答案是可以的, 也就是 mix 程序具有 <strong>应用到自己(self-application)</strong> 能力!</p>
<p>把 mix 本身作为 mix 待 specilize 的程序,
然后把 mix 在解释器程序上 specialize 后就可以得到一个编译器,
这就是 <strong>第二二村映射</strong>.</p>
<h3 id="在-mix-中利用更加高级的-division">在 Mix 中利用更加高级的 division</h3>
<p>为了简单起见, 刚刚提到 mix 算法采用的是 <em>offline partial evaluation</em>,
也就是先 通过 binding time analysis 算出 division(可以看到 mix 有一个 division 参数),
然后通过这个 divison 计算 residual program, 这个 division 在整个程序中是始终不变的.</p>
<p>想要使用刚刚提到的更加高级的 division, 我们需要对 mix 程序进行一些修改.</p>
<h4 id="在-mix-中使用-point-wise-division">在 mix 中使用 point-wise division</h4>
<p>在 mix 中使用 point-wise division 只需要把原来的 division 表示
改成一个记录了每个 point 的 division 的表就可以了.
每次需要知道某个 program point <code>pp</code> 的 division 的时候 <code>lookup(pp, division)</code> 就可以了.</p>
<p>有了 point-wise division, live and dead 就十分简单了,
还是给每个让每个 program point 的 division 不同,
刚刚提到的 point-wise division 指的是对于每个 program point,
&ldquo;哪些变量是 Static, 哪些变量是 Dynamic&quot;这一信息是不同的;
live and dead division 指的是对于每个 program point,
&ldquo;需要考虑哪些变量是 Static 或 Dynamic&quot;这一信息不同.</p>
<h4 id="在-mix-中使用-polyvariant-division">在 mix 中使用 polyvariant division</h4>
<p>想要在 mix 算法中应用 polyvariant 有两种思路:</p>
<ol>
<li>在 mix 中加入 polyvariant division 的使用逻辑,
书中的做法是给原有的由 <code>(pp, vs)</code> (subject program point 和 static value 组成的列表)
所表示的 specialized program point 再加上一个 division component &ndash; <code>(pp, vs, div)</code>,
以表示这个 program point 是根据具体 <strong>哪个</strong> 来 division 来 specialize 的.
不仅如此, 如何选取 specialized program point 也有讲究, 不能直接像初版的 mix 一样直接把一个 program point 的后继加入到 pending 里了, 要根据当前点的 divison 来决定后继节点和后继节点相应的 divisions.</li>
<li>通过 polyvariant division 先对程序进行一次变换, 得到一个有 monovariant division 的程序.</li>
</ol>
<h2 id="self-application-成功的关键">Self-Application 成功的关键</h2>
<p>刚刚提到了 mix 程序是具有通过 self-application 得到编译器的能力的,
但是如果我们简单的把写好的 mix 传给 mix 我们是得不到刚刚图示的编译器的,
虽然可以得到一个&quot;正确&quot;的编译器(只要 mix 程序的实现是正确的, 那么二村映射的含义也一定是正确的),
但这个编译器会有很多的问题, 图示的 mix 函数在背后把这些问题&quot;偷偷&quot;解决了,
只把最直观优雅的东西写了出来, 比如说以下内容, 图示算法没有显式的考虑:  <br /></p>
<ol>
<li>假设 division 已知, 而对于 mix 这样一个复杂的程序, division 的分析并不容易.</li>
<li>一些 base function 有些过于强大了, 它们到底是什么? 我们应该把哪些东西作为 base function,
把哪些东西自己把实现写到 subject program 中.</li>
<li>简单的 binding time analysis 所得到的 static variable 太少;
仅仅由相合性得到的 division, 有很多静态信息没有利用到.</li>
<li>(pp, static value)序对有很多, 这会在 residual program 中生成超多的跳转标签(远多余图示的生成的编译器).</li>
</ol>
<p>这里仅仅介绍个人觉得比较有趣的第 3 点, 如何通过 Bound Static Variation 更多的静态信息(相比与仅满足相合性的程序而言).</p>
<p>对于其他技巧, 请参考 <a href="https://www.itu.dk/people/sestoft/pebook/">Partial Evaluation教材</a> 的 <em>4.8 The tricks under the carpet</em>.</p>
<h3 id="bound-static-variation--the-trick">Bound Static Variation(&ldquo;The Trick&rdquo;)</h3>
<p>我们在 specialize 一个程序的时候, 通常会遇到一个问题:
程序中一个变量的值依赖于动态的输入, 但是其范围是已知的.</p>
<p>比如说如下程序:</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">x = input()
array = [1,2,3]
t = mod(x, 3)
y = array[t]
</code></pre><p>我们希望对其进行 specialization, x 的值显然是 Dynamic, array 的值显然是 Static,
那 t 的值依赖于 x, 所以按照相合性, t 必须被标记为 dynamic.</p>
<p>但是与一般的 Dynamic 不同, 我们并不是完全不知道 y 的取值的, 这里 y 只能取 <code>1,2,3</code> 三种值.</p>
<p>对于这种 <strong>值无法确定(Static), 但是取值范围可以确定(Static)</strong> 的值,
我们可以通过一个程序变换, 在变换中直接将这个值消除掉, 从而利用 <strong>取值范围有限</strong> 这一静态信息.</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">x = input()
array = [1,2,3]
y = case t of
  | 1 -&gt; array[1]
  | 2 -&gt; array[2]
  | 3 -&gt; array[3]
</code></pre><p>(其实也就是为每个可能的取值生成一个 case 啦)</p>
]]></content:encoded>
    </item>
    <item>
      <title>Language and Interpreters</title>
      <link>http://localhost:1313/blog/articles/language-and-interpreters/</link>
      <pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><author>azhong.934@gmail.com (butterunderflow)</author>
      <guid>http://localhost:1313/blog/articles/language-and-interpreters/</guid>
      <description>&lt;p&gt;&lt;em&gt;partial evaluation&lt;/em&gt; 的第三章 &lt;em&gt;Programming Languages and Interpreters&lt;/em&gt;
的笔记.&lt;/p&gt;
&lt;p&gt;这一章主要是形式化的介绍了一下 &lt;a href=&#34;http://localhost:1313/blog/articles/partial-evaluation/&#34;&gt;Partial Evaluation&lt;/a&gt; 中的基本概念: 程序, 解释和编译.&lt;/p&gt;
&lt;p&gt;程序只是一种表示, 程序的语义决定了程序的含义, 在这里程序的语义指的是程序执行语义的描述,
比如说 &lt;em&gt;Operational Semantic&lt;/em&gt;, 就提供了一套指导程序应该如何进行规约(reduction)的规则.&lt;/p&gt;
&lt;h2 id=&#34;定义语言-定义抽象机&#34;&gt;定义语言 = 定义抽象机&lt;/h2&gt;
&lt;p&gt;所有编程语言的语义都隐式定义了一个用于执行程序的抽象机,
可以把抽象机看作是程序的&amp;quot;解释器&amp;quot;(有的资料也称之为&amp;quot;元解释器&amp;quot;, 但我还没想明白&amp;quot;元&amp;quot;在哪里),
这也是大家经常说 &lt;strong&gt;&lt;strong&gt;所有语言本质上都是解释执行&lt;/strong&gt;&lt;/strong&gt; 的原因.&lt;/p&gt;
&lt;h2 id=&#34;解释器和解释器开销&#34;&gt;解释器和解释器开销&lt;/h2&gt;
&lt;p&gt;与直接在这个编程语言的抽象机来执行不同,
用另外一个程序来实现程序的语义可以称之为 &lt;em&gt;解释执行&lt;/em&gt;, 也就是我们常说的解释器
(注意: 解释器本身也是在解释器对应语言的抽象机上执行的).&lt;/p&gt;
&lt;p&gt;对于某个目标程序 &lt;code&gt;P&lt;/code&gt;, 解释器 &lt;code&gt;int&lt;/code&gt; 在对应抽象机上的解释程序 &lt;code&gt;P&lt;/code&gt; 所需要的执行步数,
一般要比 &lt;code&gt;P&lt;/code&gt; 在 &lt;code&gt;P&lt;/code&gt; 对应的抽象机上的执行步数要多, 而且往往是成倍数的多.&lt;/p&gt;
&lt;p&gt;比如说, 对于一个变量的求值, 在代表程序语义的抽象机上一共只需要一步 \(x \rightarrow Env[ [ x ] ]\) ;
而在解释器中, 这个求值会 &lt;strong&gt;对应&lt;/strong&gt; 到 5 步:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解释函数 (如 &lt;code&gt;eval&lt;/code&gt;) 的调用&lt;/li&gt;
&lt;li&gt;模式匹配判断当前表达式是一个变量&lt;/li&gt;
&lt;li&gt;读取环境&lt;/li&gt;
&lt;li&gt;读取变量名&lt;/li&gt;
&lt;li&gt;读取环境中对应变量名的值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以我们可以通过 case by case 的分析各种语义的对应解释器步数得到一个大致的倍数,
从而估算解释的开销(overhead), 这个开销被称为 &lt;strong&gt;&lt;strong&gt;解释器开销(Interpretation Overhand)&lt;/strong&gt;&lt;/strong&gt;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><em>partial evaluation</em> 的第三章 <em>Programming Languages and Interpreters</em>
的笔记.</p>
<p>这一章主要是形式化的介绍了一下 <a href="/blog/articles/partial-evaluation/">Partial Evaluation</a> 中的基本概念: 程序, 解释和编译.</p>
<p>程序只是一种表示, 程序的语义决定了程序的含义, 在这里程序的语义指的是程序执行语义的描述,
比如说 <em>Operational Semantic</em>, 就提供了一套指导程序应该如何进行规约(reduction)的规则.</p>
<h2 id="定义语言-定义抽象机">定义语言 = 定义抽象机</h2>
<p>所有编程语言的语义都隐式定义了一个用于执行程序的抽象机,
可以把抽象机看作是程序的&quot;解释器&quot;(有的资料也称之为&quot;元解释器&quot;, 但我还没想明白&quot;元&quot;在哪里),
这也是大家经常说 <strong><strong>所有语言本质上都是解释执行</strong></strong> 的原因.</p>
<h2 id="解释器和解释器开销">解释器和解释器开销</h2>
<p>与直接在这个编程语言的抽象机来执行不同,
用另外一个程序来实现程序的语义可以称之为 <em>解释执行</em>, 也就是我们常说的解释器
(注意: 解释器本身也是在解释器对应语言的抽象机上执行的).</p>
<p>对于某个目标程序 <code>P</code>, 解释器 <code>int</code> 在对应抽象机上的解释程序 <code>P</code> 所需要的执行步数,
一般要比 <code>P</code> 在 <code>P</code> 对应的抽象机上的执行步数要多, 而且往往是成倍数的多.</p>
<p>比如说, 对于一个变量的求值, 在代表程序语义的抽象机上一共只需要一步 \(x \rightarrow Env[ [ x ] ]\) ;
而在解释器中, 这个求值会 <strong>对应</strong> 到 5 步:</p>
<ol>
<li>解释函数 (如 <code>eval</code>) 的调用</li>
<li>模式匹配判断当前表达式是一个变量</li>
<li>读取环境</li>
<li>读取变量名</li>
<li>读取环境中对应变量名的值</li>
</ol>
<p>所以我们可以通过 case by case 的分析各种语义的对应解释器步数得到一个大致的倍数,
从而估算解释的开销(overhead), 这个开销被称为 <strong><strong>解释器开销(Interpretation Overhand)</strong></strong>.</p>
<p>刚刚提到了开销, 这个开销实际上是不可以忽略的,
首先, 在真实世界的编程语言中,
这个开销的倍数可能非常大; 另一方面,
当语言的实现涉及到多层中间表示的时候, 解释也会有多层,
那么这个开销的倍数也会相乘, 最终开销也会呈指数增长.
将源程序直接编译为可执行的程序(比如说机器指令)就是减少开销上的一种思路(减少解释的开销).
这个过程也叫 <em>lowering</em>, 把更高层的表示 <em>lowering</em> 到底层的表示.</p>
<h2 id="自举--bootstrapping">自举(bootstrapping)</h2>
<p>自举指的是一个 compiler <code>h</code> 可以通过被其 compiled version <code>t</code> 编译,
并且得到 compiled version <code>t</code>.</p>
<p>现在发现其实很多介绍没有把这一点讲透, 很多人都说:
&ldquo;自举就是编译器可以编译自己.&rdquo; 让人感觉不到这其中的微妙之处:
&ldquo;自己编译自己有什么神奇的吗?&rdquo; 实际上更完整的描述应该是:
一个编译器(compiled version)可以通过编译自己(source)*得到自己*(compiled
version)</p>
<p>书上通过举了个例子说明如何通过扩展 <code>S</code> 语言实现的 <code>S</code>
语言的编译器并完成自举的过程:</p>
<p>首先我们已有 <code>S</code> 语言编译器的源码 <code>h</code> 和编译后的代码 <code>t</code>
<img loading="lazy" src="/ox-hugo/Pasted-image-20221108053150.png"></p>
<ol>
<li>然后我们在 <code>h</code> 上扩展, 得到了一个 <code>S'=的编译器 =h'</code></li>
</ol>
<figure>
    <img loading="lazy" src="/ox-hugo/Pasted-image-20221108053354.png"/> 
</figure>

<ol>
<li>然后用一开始的 <code>t</code> 把 <code>h'</code> 编译, 得到 <code>t1'</code>
<img loading="lazy" src="/ox-hugo/Pasted-image-20221108053451.png"></li>
</ol>
<p>3.再用 <code>t1'</code> 编译一遍 <code>h'</code> . 这里第一次用了扩展后的编译器 <code>h'</code> 的语义.
<code>t1'</code> 也是 h&rsquo;的 compiled program, 但因为 <code>t1'</code>
不是由 h&rsquo;的语义编译生成的(是由=h=的语义即 <code>t</code> 编译生成的).
所以这里还算不上自举 <img loading="lazy" src="/ox-hugo/Pasted-image-20221108053602.png"></p>
<p>4.最后用 <code>t2'</code> 编译 <code>h'</code> , 这里就有了自举了. 因为 <code>t3'</code> 是完全等于 <code>t2'</code> 的,
因为 <code>t1'</code> 的语义和 <code>t2'</code> 的 <strong>语义</strong> 相同.
<img loading="lazy" src="/ox-hugo/Pasted-image-20221108053955.png"></p>
]]></content:encoded>
    </item>
    <item>
      <title>Partial Evaluation</title>
      <link>http://localhost:1313/blog/articles/partial-evaluation/</link>
      <pubDate>Sat, 22 Oct 2022 00:00:00 +0000</pubDate><author>azhong.934@gmail.com (butterunderflow)</author>
      <guid>http://localhost:1313/blog/articles/partial-evaluation/</guid>
      <description>&lt;p&gt;关于 &lt;em&gt;Partial Evaluation&lt;/em&gt; 的第一章 &lt;em&gt;Introduction&lt;/em&gt; 的笔记.&lt;/p&gt;
&lt;p&gt;从抽象上来看, 程序都可以看作是一个输入到输出的函数. 比如说某个程序输入可以拆分为 &lt;code&gt;in1&lt;/code&gt; 和 &lt;code&gt;in2&lt;/code&gt;,
如果该程序的输入 &lt;code&gt;in1&lt;/code&gt; 是可以在运行之前确定的,
那么我们就可以生成一个针对 &lt;code&gt;in1&lt;/code&gt; 优化的程序, 这个过程就叫做 specialization(特化).
针对 &lt;code&gt;in1&lt;/code&gt; 优化的&amp;quot;优化器&amp;quot;可以叫做 specializer.
所以 Partial Evaluation 可以看作做了两件事情:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算可以预先知道的输入&lt;/li&gt;
&lt;li&gt;为提前知道的输入进行特化, 生成一个针对预先输入优化的程序&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;二村映射&#34;&gt;二村映射&lt;/h2&gt;
&lt;p&gt;我们通过一个解释器程序来举例子, 一个解释器可以通过下图描述:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           +--------+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;P      --&amp;gt; | interp | --&amp;gt; out
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;input  --&amp;gt; |        |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           +--------+
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于这个 &lt;code&gt;interpreter&lt;/code&gt;, 如果有一个可以针对解释器的源程序输入 &lt;code&gt;P&lt;/code&gt; 的 specializer,
那么我们可以通过在解释器上 specialize 得到一个可执行程序. 用图画出来就是这样,
下图中的 &lt;code&gt;PE&lt;/code&gt; 就是我们的 specializer, &lt;code&gt;interpP&lt;/code&gt; 就是一个可执行程序.&lt;/p&gt;
&lt;p&gt;图 1:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           +----+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;interp --&amp;gt; | PE | --&amp;gt; interpP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     P --&amp;gt; |    |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           +----+
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个时候我们可以看到, 这个 specialzer 本身也是多参数的函数,
如果我们已经有了一个 specialzer,
如果再把这个 specializer 对 &lt;code&gt;interp&lt;/code&gt; 参数进行 specialization,
我们就可以得到一个编译器(下图中的 &lt;code&gt;PEinterp&lt;/code&gt;).&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>关于 <em>Partial Evaluation</em> 的第一章 <em>Introduction</em> 的笔记.</p>
<p>从抽象上来看, 程序都可以看作是一个输入到输出的函数. 比如说某个程序输入可以拆分为 <code>in1</code> 和 <code>in2</code>,
如果该程序的输入 <code>in1</code> 是可以在运行之前确定的,
那么我们就可以生成一个针对 <code>in1</code> 优化的程序, 这个过程就叫做 specialization(特化).
针对 <code>in1</code> 优化的&quot;优化器&quot;可以叫做 specializer.
所以 Partial Evaluation 可以看作做了两件事情:</p>
<ol>
<li>计算可以预先知道的输入</li>
<li>为提前知道的输入进行特化, 生成一个针对预先输入优化的程序</li>
</ol>
<h2 id="二村映射">二村映射</h2>
<p>我们通过一个解释器程序来举例子, 一个解释器可以通过下图描述:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>           +--------+
</span></span><span style="display:flex;"><span>P      --&gt; | interp | --&gt; out
</span></span><span style="display:flex;"><span>input  --&gt; |        |
</span></span><span style="display:flex;"><span>           +--------+
</span></span></code></pre></div><p>对于这个 <code>interpreter</code>, 如果有一个可以针对解释器的源程序输入 <code>P</code> 的 specializer,
那么我们可以通过在解释器上 specialize 得到一个可执行程序. 用图画出来就是这样,
下图中的 <code>PE</code> 就是我们的 specializer, <code>interpP</code> 就是一个可执行程序.</p>
<p>图 1:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>           +----+
</span></span><span style="display:flex;"><span>interp --&gt; | PE | --&gt; interpP
</span></span><span style="display:flex;"><span>     P --&gt; |    |
</span></span><span style="display:flex;"><span>           +----+
</span></span></code></pre></div><p>这个时候我们可以看到, 这个 specialzer 本身也是多参数的函数,
如果我们已经有了一个 specialzer,
如果再把这个 specializer 对 <code>interp</code> 参数进行 specialization,
我们就可以得到一个编译器(下图中的 <code>PEinterp</code>).</p>
<p>图 2:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>           +----+
</span></span><span style="display:flex;"><span>PE     --&gt; | PE | --&gt; PEinterp
</span></span><span style="display:flex;"><span>interp --&gt; |    |
</span></span><span style="display:flex;"><span>           +----+
</span></span></code></pre></div><p>这里的 PE 又是一个多参数的函数, 我们又可以对其进行 Specialization.
如果有一个 specialzer, 可以让 PE 对 PE 进行进行 Specialization,
那么就可以得到一个编译器的生成器(图中的 <code>PE_PE</code>).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>        +----+
</span></span><span style="display:flex;"><span>PE  --&gt; | PE | --&gt; PE_PE
</span></span><span style="display:flex;"><span>PE  --&gt; |    |
</span></span><span style="display:flex;"><span>        +----+
</span></span></code></pre></div><p>这里的每个 PE 的输入都是两个程序,
其中一个程序 <code>in1</code> 是另外一个程序 <code>in2</code> 的输入;
PE 的功能都是为 <code>in2</code> 生成一个特化在 <code>in1</code> 的版本,
这个特化的版本往往会比 <code>in1 |&gt; in2</code> 更加高效.</p>
<p>二村映射就是指的以上的几个程序特化的过程,</p>
<p>上面的 specialize 的过程有时候也叫 stage: 通过 specialize 把原来的程序分成了好几步.</p>
<h2 id="partial-evaluation-和-partial-application--柯里化">Partial Evaluation 和 Partial Application(柯里化)</h2>
<p>Partial Evaluation 和编程语言中的 Partial Application(柯里化)还是很不一样的 在 Partial
Application 中, 得到的是相同语言中的函数; 而 partial evaluation 中, 得到的是一个 <strong><strong>新的程序</strong></strong>.
这里就体现了一个 program text 和 running program 的区别:
program text 是一个 syntactic world 里的东西, 比如说符号, 表达式, 只是程序的 <strong><strong>表示</strong></strong>;
function 是数学意义(语义)上的东西,
需要把 program text 传给语义函数后(通俗的说就是要把程序运行起来)才能把 program text 和 function 关联起来.
所以 partial evaluation 和 <a href="https://en.wikipedia.org/wiki/Currying">柯里化</a> 时的 partial application 并不是一回事.</p>
<p>感谢 kokic 为本文找到的 typo!</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
